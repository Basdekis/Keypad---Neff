
GccApplication4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000010d2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000022  00802000  000010d2  00001166  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00802022  00802022  00001188  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001188  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000011e4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e0  00000000  00000000  00001224  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004515  00000000  00000000  00001304  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003785  00000000  00000000  00005819  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000be8  00000000  00000000  00008f9e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002a8  00000000  00000000  00009b88  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000292d  00000000  00000000  00009e30  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000d8c  00000000  00000000  0000c75d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b8  00000000  00000000  0000d4e9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <__ctors_end>
       4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
       8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
       c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      10:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      14:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      18:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      1c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      20:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      24:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      28:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      2c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      30:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      34:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      38:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      3c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      40:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      44:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      48:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      4c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      50:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      54:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      58:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      5c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      60:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      64:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      68:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      6c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      70:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      74:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      78:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      7c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      80:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      84:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      88:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      8c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      90:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      94:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      98:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      9c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      a0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      a4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      a8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      ac:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      b0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      b4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      b8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      bc:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      c0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      c4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      c8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      cc:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      d0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      d4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      d8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      dc:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      e0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      e4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      e8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      ec:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      f0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      f4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      f8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      fc:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
     100:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
     104:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
     108:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
     10c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
     110:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
     114:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
     118:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
     11c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
     120:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
     124:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
     128:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
     12c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
     130:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
     134:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
     138:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
     13c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
     140:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
     144:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
     148:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
     14c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
     150:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
     154:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
     158:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
     15c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
     160:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
     164:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
     168:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
     16c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
     170:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
     174:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
     178:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
     17c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
     180:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
     184:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
     188:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
     18c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
     190:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
     194:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
     198:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
     19c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
     1a0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
     1a4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
     1a8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
     1ac:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
     1b0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
     1b4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
     1b8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
     1bc:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
     1c0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
     1c4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
     1c8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
     1cc:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
     1d0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
     1d4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
     1d8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
     1dc:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
     1e0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
     1e4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
     1e8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
     1ec:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
     1f0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>

000001f4 <__trampolines_start>:
     1f4:	0c 94 94 01 	jmp	0x328	; 0x328 <usart_getc>
     1f8:	0c 94 a9 01 	jmp	0x352	; 0x352 <usart_putc>

000001fc <__ctors_end>:
     1fc:	11 24       	eor	r1, r1
     1fe:	1f be       	out	0x3f, r1	; 63
     200:	cf ef       	ldi	r28, 0xFF	; 255
     202:	cd bf       	out	0x3d, r28	; 61
     204:	df e3       	ldi	r29, 0x3F	; 63
     206:	de bf       	out	0x3e, r29	; 62
     208:	00 e0       	ldi	r16, 0x00	; 0
     20a:	0c bf       	out	0x3c, r16	; 60
     20c:	18 be       	out	0x38, r1	; 56
     20e:	19 be       	out	0x39, r1	; 57
     210:	1a be       	out	0x3a, r1	; 58
     212:	1b be       	out	0x3b, r1	; 59

00000214 <__do_copy_data>:
     214:	10 e2       	ldi	r17, 0x20	; 32
     216:	a0 e0       	ldi	r26, 0x00	; 0
     218:	b0 e2       	ldi	r27, 0x20	; 32
     21a:	e2 ed       	ldi	r30, 0xD2	; 210
     21c:	f0 e1       	ldi	r31, 0x10	; 16
     21e:	00 e0       	ldi	r16, 0x00	; 0
     220:	0b bf       	out	0x3b, r16	; 59
     222:	02 c0       	rjmp	.+4      	; 0x228 <__do_copy_data+0x14>
     224:	07 90       	elpm	r0, Z+
     226:	0d 92       	st	X+, r0
     228:	a2 32       	cpi	r26, 0x22	; 34
     22a:	b1 07       	cpc	r27, r17
     22c:	d9 f7       	brne	.-10     	; 0x224 <__do_copy_data+0x10>
     22e:	1b be       	out	0x3b, r1	; 59

00000230 <__do_clear_bss>:
     230:	20 e2       	ldi	r18, 0x20	; 32
     232:	a2 e2       	ldi	r26, 0x22	; 34
     234:	b0 e2       	ldi	r27, 0x20	; 32
     236:	01 c0       	rjmp	.+2      	; 0x23a <.do_clear_bss_start>

00000238 <.do_clear_bss_loop>:
     238:	1d 92       	st	X+, r1

0000023a <.do_clear_bss_start>:
     23a:	a8 32       	cpi	r26, 0x28	; 40
     23c:	b2 07       	cpc	r27, r18
     23e:	e1 f7       	brne	.-8      	; 0x238 <.do_clear_bss_loop>
     240:	0e 94 41 01 	call	0x282	; 0x282 <main>
     244:	0c 94 67 08 	jmp	0x10ce	; 0x10ce <_exit>

00000248 <__bad_interrupt>:
     248:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000024c <console_init>:
static FILE console_out = FDEV_SETUP_STREAM(NULL, NULL, _FDEV_SETUP_WRITE);


void console_init(int (*get)(FILE*),int (*put)(char, FILE*))
{
	console_in.get = get;
     24c:	80 93 18 20 	sts	0x2018, r24	; 0x802018 <console_in+0xa>
     250:	90 93 19 20 	sts	0x2019, r25	; 0x802019 <console_in+0xb>
	console_out.put = put;
     254:	60 93 08 20 	sts	0x2008, r22	; 0x802008 <__data_start+0x8>
     258:	70 93 09 20 	sts	0x2009, r23	; 0x802009 <__data_start+0x9>
	if (get) {
     25c:	89 2b       	or	r24, r25
     25e:	31 f0       	breq	.+12     	; 0x26c <console_init+0x20>
    	stdin  = &console_in;
     260:	8e e0       	ldi	r24, 0x0E	; 14
     262:	90 e2       	ldi	r25, 0x20	; 32
     264:	80 93 22 20 	sts	0x2022, r24	; 0x802022 <__data_end>
     268:	90 93 23 20 	sts	0x2023, r25	; 0x802023 <__data_end+0x1>
	}
	if (put) {
     26c:	67 2b       	or	r22, r23
     26e:	41 f0       	breq	.+16     	; 0x280 <console_init+0x34>
	    stderr = &console_out;
     270:	e2 e2       	ldi	r30, 0x22	; 34
     272:	f0 e2       	ldi	r31, 0x20	; 32
     274:	80 e0       	ldi	r24, 0x00	; 0
     276:	90 e2       	ldi	r25, 0x20	; 32
     278:	84 83       	std	Z+4, r24	; 0x04
     27a:	95 83       	std	Z+5, r25	; 0x05
	    stdout = &console_out;
     27c:	82 83       	std	Z+2, r24	; 0x02
     27e:	93 83       	std	Z+3, r25	; 0x03
     280:	08 95       	ret

00000282 <main>:


int main(void)
{

	LED_PORT.DIR = LED0_PIN_bm;
     282:	81 e0       	ldi	r24, 0x01	; 1
     284:	80 93 80 06 	sts	0x0680, r24	; 0x800680 <__TEXT_REGION_LENGTH__+0x700680>
	//
	//USB_USART_MODULE.CTRLC = (USART_CHSIZE_8BIT_gc | USART_PMODE_DISABLED_gc);
	//
	//USB_USART_MODULE.CTRLB = (USART_RXEN_bm | USART_TXEN_bm);
	
	usart_init();
     288:	0e 94 e5 04 	call	0x9ca	; 0x9ca <usart_init>
	console_init(usart_getc, usart_putc);
     28c:	69 ea       	ldi	r22, 0xA9	; 169
     28e:	71 e0       	ldi	r23, 0x01	; 1
     290:	84 e9       	ldi	r24, 0x94	; 148
     292:	91 e0       	ldi	r25, 0x01	; 1
     294:	0e 94 26 01 	call	0x24c	; 0x24c <console_init>
		//if (!(BUTTON_LOW_PORT.IN & BUTTON0_PINCTRL)) {  
			//while(!(USB_USART_MODULE.STATUS & USART_DREIF_bm));  
			//USB_USART_MODULE.DATA = pad_scan();
		//}
		
		printf("%04x", pad_scan());
     298:	cc e1       	ldi	r28, 0x1C	; 28
     29a:	d0 e2       	ldi	r29, 0x20	; 32
     29c:	0e 94 61 01 	call	0x2c2	; 0x2c2 <pad_scan>
     2a0:	9f 93       	push	r25
     2a2:	8f 93       	push	r24
     2a4:	df 93       	push	r29
     2a6:	cf 93       	push	r28
     2a8:	0e 94 9f 05 	call	0xb3e	; 0xb3e <printf>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     2ac:	8f e4       	ldi	r24, 0x4F	; 79
     2ae:	93 ec       	ldi	r25, 0xC3	; 195
     2b0:	01 97       	sbiw	r24, 0x01	; 1
     2b2:	f1 f7       	brne	.-4      	; 0x2b0 <main+0x2e>
     2b4:	00 c0       	rjmp	.+0      	; 0x2b6 <main+0x34>
     2b6:	00 00       	nop
     2b8:	0f 90       	pop	r0
     2ba:	0f 90       	pop	r0
     2bc:	0f 90       	pop	r0
     2be:	0f 90       	pop	r0
     2c0:	ed cf       	rjmp	.-38     	; 0x29c <main+0x1a>

000002c2 <pad_scan>:
}

uint16_t pad_scan(){
	uint16_t buttonstates = 0x00;
	
	PORTD.OUT = PIN4_bm;
     2c2:	e0 e6       	ldi	r30, 0x60	; 96
     2c4:	f6 e0       	ldi	r31, 0x06	; 6
     2c6:	80 e1       	ldi	r24, 0x10	; 16
     2c8:	84 83       	std	Z+4, r24	; 0x04
	buttonstates |= (PORTD.IN);
     2ca:	80 85       	ldd	r24, Z+8	; 0x08
	
	PORTD.OUT = PIN5_bm;
     2cc:	80 e2       	ldi	r24, 0x20	; 32
     2ce:	84 83       	std	Z+4, r24	; 0x04
	buttonstates = (buttonstates << 4);
	buttonstates |= (PORTD.IN);
     2d0:	80 85       	ldd	r24, Z+8	; 0x08
	
	PORTD.OUT = PIN6_bm;
     2d2:	80 e4       	ldi	r24, 0x40	; 64
     2d4:	84 83       	std	Z+4, r24	; 0x04
	buttonstates = (buttonstates << 8);
	buttonstates |= (PORTD.IN);
     2d6:	80 85       	ldd	r24, Z+8	; 0x08
     2d8:	90 e0       	ldi	r25, 0x00	; 0
	
	PORTD.OUT = PIN7_bm;
     2da:	20 e8       	ldi	r18, 0x80	; 128
     2dc:	24 83       	std	Z+4, r18	; 0x04
	buttonstates = (buttonstates << 12);
     2de:	98 2f       	mov	r25, r24
     2e0:	88 27       	eor	r24, r24
     2e2:	92 95       	swap	r25
     2e4:	90 7f       	andi	r25, 0xF0	; 240
	buttonstates |= (PORTD.IN);
     2e6:	20 85       	ldd	r18, Z+8	; 0x08
	
	PORTD.OUT = 0x00;
     2e8:	14 82       	std	Z+4, r1	; 0x04
	return buttonstates;
     2ea:	82 2b       	or	r24, r18
     2ec:	08 95       	ret

000002ee <usart_getchar>:

int usart_puts_P(const char *s)
{
    while (pgm_read_byte(s)) usart_putchar(pgm_read_byte(s++));
	return USART_SUCCESS;
}
     2ee:	e0 ea       	ldi	r30, 0xA0	; 160
     2f0:	f8 e0       	ldi	r31, 0x08	; 8
     2f2:	81 81       	ldd	r24, Z+1	; 0x01
     2f4:	88 23       	and	r24, r24
     2f6:	ec f7       	brge	.-6      	; 0x2f2 <usart_getchar+0x4>
     2f8:	e0 ea       	ldi	r30, 0xA0	; 160
     2fa:	f8 e0       	ldi	r31, 0x08	; 8
     2fc:	80 81       	ld	r24, Z
     2fe:	21 81       	ldd	r18, Z+1	; 0x01
     300:	2c 71       	andi	r18, 0x1C	; 28
     302:	90 e4       	ldi	r25, 0x40	; 64
     304:	29 9f       	mul	r18, r25
     306:	90 01       	movw	r18, r0
     308:	11 24       	eor	r1, r1
     30a:	41 e0       	ldi	r20, 0x01	; 1
     30c:	50 e0       	ldi	r21, 0x00	; 0
     30e:	8d 30       	cpi	r24, 0x0D	; 13
     310:	11 f0       	breq	.+4      	; 0x316 <usart_getchar+0x28>
     312:	40 e0       	ldi	r20, 0x00	; 0
     314:	50 e0       	ldi	r21, 0x00	; 0
     316:	24 2b       	or	r18, r20
     318:	35 2b       	or	r19, r21
     31a:	23 2b       	or	r18, r19
     31c:	11 f4       	brne	.+4      	; 0x322 <usart_getchar+0x34>
     31e:	90 e0       	ldi	r25, 0x00	; 0
     320:	08 95       	ret
     322:	8a e0       	ldi	r24, 0x0A	; 10
     324:	90 e0       	ldi	r25, 0x00	; 0
     326:	08 95       	ret

00000328 <usart_getc>:
     328:	0e 94 77 01 	call	0x2ee	; 0x2ee <usart_getchar>
     32c:	08 95       	ret

0000032e <usart_putchar>:
     32e:	cf 93       	push	r28
     330:	c8 2f       	mov	r28, r24
     332:	8a 30       	cpi	r24, 0x0A	; 10
     334:	19 f4       	brne	.+6      	; 0x33c <usart_putchar+0xe>
     336:	8d e0       	ldi	r24, 0x0D	; 13
     338:	0e 94 97 01 	call	0x32e	; 0x32e <usart_putchar>
     33c:	e0 ea       	ldi	r30, 0xA0	; 160
     33e:	f8 e0       	ldi	r31, 0x08	; 8
     340:	81 81       	ldd	r24, Z+1	; 0x01
     342:	85 ff       	sbrs	r24, 5
     344:	fd cf       	rjmp	.-6      	; 0x340 <usart_putchar+0x12>
     346:	c0 93 a0 08 	sts	0x08A0, r28	; 0x8008a0 <__TEXT_REGION_LENGTH__+0x7008a0>
     34a:	80 e0       	ldi	r24, 0x00	; 0
     34c:	90 e0       	ldi	r25, 0x00	; 0
     34e:	cf 91       	pop	r28
     350:	08 95       	ret

00000352 <usart_putc>:
     352:	0e 94 97 01 	call	0x32e	; 0x32e <usart_putchar>
     356:	08 95       	ret

00000358 <usart_bsel>:

int usart_bsel(long freq, long baud, int bscale, int clk2x)
{
     358:	4f 92       	push	r4
     35a:	5f 92       	push	r5
     35c:	6f 92       	push	r6
     35e:	7f 92       	push	r7
     360:	8f 92       	push	r8
     362:	9f 92       	push	r9
     364:	af 92       	push	r10
     366:	bf 92       	push	r11
     368:	cf 92       	push	r12
     36a:	df 92       	push	r13
     36c:	ef 92       	push	r14
     36e:	ff 92       	push	r15
     370:	0f 93       	push	r16
     372:	1f 93       	push	r17
     374:	cf 93       	push	r28
     376:	df 93       	push	r29
     378:	00 d0       	rcall	.+0      	; 0x37a <usart_bsel+0x22>
     37a:	1f 92       	push	r1
     37c:	cd b7       	in	r28, 0x3d	; 61
     37e:	de b7       	in	r29, 0x3e	; 62
     380:	69 83       	std	Y+1, r22	; 0x01
     382:	7a 83       	std	Y+2, r23	; 0x02
     384:	8b 83       	std	Y+3, r24	; 0x03
     386:	9c 83       	std	Y+4, r25	; 0x04
	long num, denom;
	if (clk2x==0 && bscale>=0) {
     388:	e1 14       	cp	r14, r1
     38a:	f1 04       	cpc	r15, r1
     38c:	09 f0       	breq	.+2      	; 0x390 <usart_bsel+0x38>
     38e:	94 c0       	rjmp	.+296    	; 0x4b8 <__LOCK_REGION_LENGTH__+0xb8>
     390:	11 23       	and	r17, r17
     392:	0c f4       	brge	.+2      	; 0x396 <usart_bsel+0x3e>
     394:	45 c0       	rjmp	.+138    	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
		num = (freq/10)-(16*baud*(1<<bscale)/10);
     396:	da 01       	movw	r26, r20
     398:	c9 01       	movw	r24, r18
     39a:	88 0f       	add	r24, r24
     39c:	99 1f       	adc	r25, r25
     39e:	aa 1f       	adc	r26, r26
     3a0:	bb 1f       	adc	r27, r27
     3a2:	88 0f       	add	r24, r24
     3a4:	99 1f       	adc	r25, r25
     3a6:	aa 1f       	adc	r26, r26
     3a8:	bb 1f       	adc	r27, r27
     3aa:	9c 01       	movw	r18, r24
     3ac:	ad 01       	movw	r20, r26
     3ae:	22 0f       	add	r18, r18
     3b0:	33 1f       	adc	r19, r19
     3b2:	44 1f       	adc	r20, r20
     3b4:	55 1f       	adc	r21, r21
     3b6:	22 0f       	add	r18, r18
     3b8:	33 1f       	adc	r19, r19
     3ba:	44 1f       	adc	r20, r20
     3bc:	55 1f       	adc	r21, r21
     3be:	a1 e0       	ldi	r26, 0x01	; 1
     3c0:	b0 e0       	ldi	r27, 0x00	; 0
     3c2:	02 c0       	rjmp	.+4      	; 0x3c8 <usart_bsel+0x70>
     3c4:	aa 0f       	add	r26, r26
     3c6:	bb 1f       	adc	r27, r27
     3c8:	0a 95       	dec	r16
     3ca:	e2 f7       	brpl	.-8      	; 0x3c4 <usart_bsel+0x6c>
     3cc:	0e 94 66 05 	call	0xacc	; 0xacc <__mulshisi3>
     3d0:	2b 01       	movw	r4, r22
     3d2:	3c 01       	movw	r6, r24
     3d4:	0f 2e       	mov	r0, r31
     3d6:	fa e0       	ldi	r31, 0x0A	; 10
     3d8:	cf 2e       	mov	r12, r31
     3da:	d1 2c       	mov	r13, r1
     3dc:	e1 2c       	mov	r14, r1
     3de:	f1 2c       	mov	r15, r1
     3e0:	f0 2d       	mov	r31, r0
     3e2:	69 81       	ldd	r22, Y+1	; 0x01
     3e4:	7a 81       	ldd	r23, Y+2	; 0x02
     3e6:	8b 81       	ldd	r24, Y+3	; 0x03
     3e8:	9c 81       	ldd	r25, Y+4	; 0x04
     3ea:	a7 01       	movw	r20, r14
     3ec:	96 01       	movw	r18, r12
     3ee:	0e 94 3c 05 	call	0xa78	; 0xa78 <__divmodsi4>
     3f2:	49 01       	movw	r8, r18
     3f4:	5a 01       	movw	r10, r20
     3f6:	c3 01       	movw	r24, r6
     3f8:	b2 01       	movw	r22, r4
     3fa:	a7 01       	movw	r20, r14
     3fc:	96 01       	movw	r18, r12
     3fe:	0e 94 3c 05 	call	0xa78	; 0xa78 <__divmodsi4>
     402:	82 1a       	sub	r8, r18
     404:	93 0a       	sbc	r9, r19
     406:	a4 0a       	sbc	r10, r20
     408:	b5 0a       	sbc	r11, r21
		denom = 16*baud*(1<<bscale)/100;
     40a:	c3 01       	movw	r24, r6
     40c:	b2 01       	movw	r22, r4
     40e:	24 e6       	ldi	r18, 0x64	; 100
     410:	30 e0       	ldi	r19, 0x00	; 0
     412:	40 e0       	ldi	r20, 0x00	; 0
     414:	50 e0       	ldi	r21, 0x00	; 0
     416:	0e 94 3c 05 	call	0xa78	; 0xa78 <__divmodsi4>
     41a:	29 01       	movw	r4, r18
     41c:	3a 01       	movw	r6, r20
     41e:	db c0       	rjmp	.+438    	; 0x5d6 <__LOCK_REGION_LENGTH__+0x1d6>
	}
	else if (clk2x==0 && bscale<0) {
		num = (1<<-bscale)*(freq/10-16*baud/10);
     420:	da 01       	movw	r26, r20
     422:	c9 01       	movw	r24, r18
     424:	88 0f       	add	r24, r24
     426:	99 1f       	adc	r25, r25
     428:	aa 1f       	adc	r26, r26
     42a:	bb 1f       	adc	r27, r27
     42c:	88 0f       	add	r24, r24
     42e:	99 1f       	adc	r25, r25
     430:	aa 1f       	adc	r26, r26
     432:	bb 1f       	adc	r27, r27
     434:	2c 01       	movw	r4, r24
     436:	3d 01       	movw	r6, r26
     438:	44 0c       	add	r4, r4
     43a:	55 1c       	adc	r5, r5
     43c:	66 1c       	adc	r6, r6
     43e:	77 1c       	adc	r7, r7
     440:	44 0c       	add	r4, r4
     442:	55 1c       	adc	r5, r5
     444:	66 1c       	adc	r6, r6
     446:	77 1c       	adc	r7, r7
     448:	0f 2e       	mov	r0, r31
     44a:	fa e0       	ldi	r31, 0x0A	; 10
     44c:	cf 2e       	mov	r12, r31
     44e:	d1 2c       	mov	r13, r1
     450:	e1 2c       	mov	r14, r1
     452:	f1 2c       	mov	r15, r1
     454:	f0 2d       	mov	r31, r0
     456:	69 81       	ldd	r22, Y+1	; 0x01
     458:	7a 81       	ldd	r23, Y+2	; 0x02
     45a:	8b 81       	ldd	r24, Y+3	; 0x03
     45c:	9c 81       	ldd	r25, Y+4	; 0x04
     45e:	a7 01       	movw	r20, r14
     460:	96 01       	movw	r18, r12
     462:	0e 94 3c 05 	call	0xa78	; 0xa78 <__divmodsi4>
     466:	49 01       	movw	r8, r18
     468:	5a 01       	movw	r10, r20
     46a:	c3 01       	movw	r24, r6
     46c:	b2 01       	movw	r22, r4
     46e:	a7 01       	movw	r20, r14
     470:	96 01       	movw	r18, r12
     472:	0e 94 3c 05 	call	0xa78	; 0xa78 <__divmodsi4>
     476:	d5 01       	movw	r26, r10
     478:	c4 01       	movw	r24, r8
     47a:	82 1b       	sub	r24, r18
     47c:	93 0b       	sbc	r25, r19
     47e:	a4 0b       	sbc	r26, r20
     480:	b5 0b       	sbc	r27, r21
     482:	9c 01       	movw	r18, r24
     484:	ad 01       	movw	r20, r26
     486:	11 95       	neg	r17
     488:	01 95       	neg	r16
     48a:	11 09       	sbc	r17, r1
     48c:	a1 e0       	ldi	r26, 0x01	; 1
     48e:	b0 e0       	ldi	r27, 0x00	; 0
     490:	02 c0       	rjmp	.+4      	; 0x496 <__LOCK_REGION_LENGTH__+0x96>
     492:	aa 0f       	add	r26, r26
     494:	bb 1f       	adc	r27, r27
     496:	0a 95       	dec	r16
     498:	e2 f7       	brpl	.-8      	; 0x492 <__LOCK_REGION_LENGTH__+0x92>
     49a:	0e 94 66 05 	call	0xacc	; 0xacc <__mulshisi3>
     49e:	4b 01       	movw	r8, r22
     4a0:	5c 01       	movw	r10, r24
		denom = 16*baud/100;
     4a2:	c3 01       	movw	r24, r6
     4a4:	b2 01       	movw	r22, r4
     4a6:	24 e6       	ldi	r18, 0x64	; 100
     4a8:	30 e0       	ldi	r19, 0x00	; 0
     4aa:	40 e0       	ldi	r20, 0x00	; 0
     4ac:	50 e0       	ldi	r21, 0x00	; 0
     4ae:	0e 94 3c 05 	call	0xa78	; 0xa78 <__divmodsi4>
     4b2:	29 01       	movw	r4, r18
     4b4:	3a 01       	movw	r6, r20
     4b6:	8f c0       	rjmp	.+286    	; 0x5d6 <__LOCK_REGION_LENGTH__+0x1d6>
	}
	else if (clk2x==1 && bscale>=0) {
     4b8:	ea 94       	dec	r14
     4ba:	ef 28       	or	r14, r15
     4bc:	09 f0       	breq	.+2      	; 0x4c0 <__LOCK_REGION_LENGTH__+0xc0>
     4be:	8b c0       	rjmp	.+278    	; 0x5d6 <__LOCK_REGION_LENGTH__+0x1d6>
     4c0:	11 23       	and	r17, r17
     4c2:	0c f4       	brge	.+2      	; 0x4c6 <__LOCK_REGION_LENGTH__+0xc6>
     4c4:	41 c0       	rjmp	.+130    	; 0x548 <__LOCK_REGION_LENGTH__+0x148>
		num = (freq/10)-(8*baud*(1<<bscale)/10);
     4c6:	da 01       	movw	r26, r20
     4c8:	c9 01       	movw	r24, r18
     4ca:	88 0f       	add	r24, r24
     4cc:	99 1f       	adc	r25, r25
     4ce:	aa 1f       	adc	r26, r26
     4d0:	bb 1f       	adc	r27, r27
     4d2:	88 0f       	add	r24, r24
     4d4:	99 1f       	adc	r25, r25
     4d6:	aa 1f       	adc	r26, r26
     4d8:	bb 1f       	adc	r27, r27
     4da:	9c 01       	movw	r18, r24
     4dc:	ad 01       	movw	r20, r26
     4de:	22 0f       	add	r18, r18
     4e0:	33 1f       	adc	r19, r19
     4e2:	44 1f       	adc	r20, r20
     4e4:	55 1f       	adc	r21, r21
     4e6:	a1 e0       	ldi	r26, 0x01	; 1
     4e8:	b0 e0       	ldi	r27, 0x00	; 0
     4ea:	02 c0       	rjmp	.+4      	; 0x4f0 <__LOCK_REGION_LENGTH__+0xf0>
     4ec:	aa 0f       	add	r26, r26
     4ee:	bb 1f       	adc	r27, r27
     4f0:	0a 95       	dec	r16
     4f2:	e2 f7       	brpl	.-8      	; 0x4ec <__LOCK_REGION_LENGTH__+0xec>
     4f4:	0e 94 66 05 	call	0xacc	; 0xacc <__mulshisi3>
     4f8:	6b 01       	movw	r12, r22
     4fa:	7c 01       	movw	r14, r24
     4fc:	0f 2e       	mov	r0, r31
     4fe:	fa e0       	ldi	r31, 0x0A	; 10
     500:	4f 2e       	mov	r4, r31
     502:	51 2c       	mov	r5, r1
     504:	61 2c       	mov	r6, r1
     506:	71 2c       	mov	r7, r1
     508:	f0 2d       	mov	r31, r0
     50a:	69 81       	ldd	r22, Y+1	; 0x01
     50c:	7a 81       	ldd	r23, Y+2	; 0x02
     50e:	8b 81       	ldd	r24, Y+3	; 0x03
     510:	9c 81       	ldd	r25, Y+4	; 0x04
     512:	a3 01       	movw	r20, r6
     514:	92 01       	movw	r18, r4
     516:	0e 94 3c 05 	call	0xa78	; 0xa78 <__divmodsi4>
     51a:	49 01       	movw	r8, r18
     51c:	5a 01       	movw	r10, r20
     51e:	c7 01       	movw	r24, r14
     520:	b6 01       	movw	r22, r12
     522:	a3 01       	movw	r20, r6
     524:	92 01       	movw	r18, r4
     526:	0e 94 3c 05 	call	0xa78	; 0xa78 <__divmodsi4>
     52a:	82 1a       	sub	r8, r18
     52c:	93 0a       	sbc	r9, r19
     52e:	a4 0a       	sbc	r10, r20
     530:	b5 0a       	sbc	r11, r21
		denom = 8*baud*(1<<bscale)/100;
     532:	c7 01       	movw	r24, r14
     534:	b6 01       	movw	r22, r12
     536:	24 e6       	ldi	r18, 0x64	; 100
     538:	30 e0       	ldi	r19, 0x00	; 0
     53a:	40 e0       	ldi	r20, 0x00	; 0
     53c:	50 e0       	ldi	r21, 0x00	; 0
     53e:	0e 94 3c 05 	call	0xa78	; 0xa78 <__divmodsi4>
     542:	29 01       	movw	r4, r18
     544:	3a 01       	movw	r6, r20
     546:	47 c0       	rjmp	.+142    	; 0x5d6 <__LOCK_REGION_LENGTH__+0x1d6>
	}
	else if (clk2x==1 && bscale<0) {
		num = (1<<-bscale)*(freq/10-8*baud/10);
     548:	da 01       	movw	r26, r20
     54a:	c9 01       	movw	r24, r18
     54c:	88 0f       	add	r24, r24
     54e:	99 1f       	adc	r25, r25
     550:	aa 1f       	adc	r26, r26
     552:	bb 1f       	adc	r27, r27
     554:	88 0f       	add	r24, r24
     556:	99 1f       	adc	r25, r25
     558:	aa 1f       	adc	r26, r26
     55a:	bb 1f       	adc	r27, r27
     55c:	2c 01       	movw	r4, r24
     55e:	3d 01       	movw	r6, r26
     560:	44 0c       	add	r4, r4
     562:	55 1c       	adc	r5, r5
     564:	66 1c       	adc	r6, r6
     566:	77 1c       	adc	r7, r7
     568:	0f 2e       	mov	r0, r31
     56a:	fa e0       	ldi	r31, 0x0A	; 10
     56c:	cf 2e       	mov	r12, r31
     56e:	d1 2c       	mov	r13, r1
     570:	e1 2c       	mov	r14, r1
     572:	f1 2c       	mov	r15, r1
     574:	f0 2d       	mov	r31, r0
     576:	69 81       	ldd	r22, Y+1	; 0x01
     578:	7a 81       	ldd	r23, Y+2	; 0x02
     57a:	8b 81       	ldd	r24, Y+3	; 0x03
     57c:	9c 81       	ldd	r25, Y+4	; 0x04
     57e:	a7 01       	movw	r20, r14
     580:	96 01       	movw	r18, r12
     582:	0e 94 3c 05 	call	0xa78	; 0xa78 <__divmodsi4>
     586:	49 01       	movw	r8, r18
     588:	5a 01       	movw	r10, r20
     58a:	c3 01       	movw	r24, r6
     58c:	b2 01       	movw	r22, r4
     58e:	a7 01       	movw	r20, r14
     590:	96 01       	movw	r18, r12
     592:	0e 94 3c 05 	call	0xa78	; 0xa78 <__divmodsi4>
     596:	d5 01       	movw	r26, r10
     598:	c4 01       	movw	r24, r8
     59a:	82 1b       	sub	r24, r18
     59c:	93 0b       	sbc	r25, r19
     59e:	a4 0b       	sbc	r26, r20
     5a0:	b5 0b       	sbc	r27, r21
     5a2:	9c 01       	movw	r18, r24
     5a4:	ad 01       	movw	r20, r26
     5a6:	11 95       	neg	r17
     5a8:	01 95       	neg	r16
     5aa:	11 09       	sbc	r17, r1
     5ac:	a1 e0       	ldi	r26, 0x01	; 1
     5ae:	b0 e0       	ldi	r27, 0x00	; 0
     5b0:	02 c0       	rjmp	.+4      	; 0x5b6 <__LOCK_REGION_LENGTH__+0x1b6>
     5b2:	aa 0f       	add	r26, r26
     5b4:	bb 1f       	adc	r27, r27
     5b6:	0a 95       	dec	r16
     5b8:	e2 f7       	brpl	.-8      	; 0x5b2 <__LOCK_REGION_LENGTH__+0x1b2>
     5ba:	0e 94 66 05 	call	0xacc	; 0xacc <__mulshisi3>
     5be:	4b 01       	movw	r8, r22
     5c0:	5c 01       	movw	r10, r24
		denom = 8*baud/100;
     5c2:	c3 01       	movw	r24, r6
     5c4:	b2 01       	movw	r22, r4
     5c6:	24 e6       	ldi	r18, 0x64	; 100
     5c8:	30 e0       	ldi	r19, 0x00	; 0
     5ca:	40 e0       	ldi	r20, 0x00	; 0
     5cc:	50 e0       	ldi	r21, 0x00	; 0
     5ce:	0e 94 3c 05 	call	0xa78	; 0xa78 <__divmodsi4>
     5d2:	29 01       	movw	r4, r18
     5d4:	3a 01       	movw	r6, r20
	}
	#pragma GCC diagnostic ignored "-Wmaybe-uninitialized"
	return (num<0 || denom==0) ? -1 : (num/denom+5)/10;
     5d6:	bb 20       	and	r11, r11
     5d8:	cc f0       	brlt	.+50     	; 0x60c <__LOCK_REGION_LENGTH__+0x20c>
     5da:	41 14       	cp	r4, r1
     5dc:	51 04       	cpc	r5, r1
     5de:	61 04       	cpc	r6, r1
     5e0:	71 04       	cpc	r7, r1
     5e2:	b9 f0       	breq	.+46     	; 0x612 <__LOCK_REGION_LENGTH__+0x212>
     5e4:	c5 01       	movw	r24, r10
     5e6:	b4 01       	movw	r22, r8
     5e8:	a3 01       	movw	r20, r6
     5ea:	92 01       	movw	r18, r4
     5ec:	0e 94 3c 05 	call	0xa78	; 0xa78 <__divmodsi4>
     5f0:	ca 01       	movw	r24, r20
     5f2:	b9 01       	movw	r22, r18
     5f4:	6b 5f       	subi	r22, 0xFB	; 251
     5f6:	7f 4f       	sbci	r23, 0xFF	; 255
     5f8:	8f 4f       	sbci	r24, 0xFF	; 255
     5fa:	9f 4f       	sbci	r25, 0xFF	; 255
     5fc:	2a e0       	ldi	r18, 0x0A	; 10
     5fe:	30 e0       	ldi	r19, 0x00	; 0
     600:	40 e0       	ldi	r20, 0x00	; 0
     602:	50 e0       	ldi	r21, 0x00	; 0
     604:	0e 94 3c 05 	call	0xa78	; 0xa78 <__divmodsi4>
     608:	c9 01       	movw	r24, r18
     60a:	05 c0       	rjmp	.+10     	; 0x616 <__LOCK_REGION_LENGTH__+0x216>
     60c:	8f ef       	ldi	r24, 0xFF	; 255
     60e:	9f ef       	ldi	r25, 0xFF	; 255
     610:	02 c0       	rjmp	.+4      	; 0x616 <__LOCK_REGION_LENGTH__+0x216>
     612:	8f ef       	ldi	r24, 0xFF	; 255
     614:	9f ef       	ldi	r25, 0xFF	; 255
	#pragma GCC diagnostic warning "-Wmaybe-uninitialized"
}
     616:	24 96       	adiw	r28, 0x04	; 4
     618:	cd bf       	out	0x3d, r28	; 61
     61a:	de bf       	out	0x3e, r29	; 62
     61c:	df 91       	pop	r29
     61e:	cf 91       	pop	r28
     620:	1f 91       	pop	r17
     622:	0f 91       	pop	r16
     624:	ff 90       	pop	r15
     626:	ef 90       	pop	r14
     628:	df 90       	pop	r13
     62a:	cf 90       	pop	r12
     62c:	bf 90       	pop	r11
     62e:	af 90       	pop	r10
     630:	9f 90       	pop	r9
     632:	8f 90       	pop	r8
     634:	7f 90       	pop	r7
     636:	6f 90       	pop	r6
     638:	5f 90       	pop	r5
     63a:	4f 90       	pop	r4
     63c:	08 95       	ret

0000063e <usart_baud>:

long usart_baud(long freq, int bsel, int bscale, int clk2x)
{
     63e:	8f 92       	push	r8
     640:	9f 92       	push	r9
     642:	af 92       	push	r10
     644:	bf 92       	push	r11
     646:	cf 92       	push	r12
     648:	df 92       	push	r13
     64a:	ef 92       	push	r14
     64c:	ff 92       	push	r15
     64e:	0f 93       	push	r16
     650:	1f 93       	push	r17
     652:	cf 93       	push	r28
     654:	df 93       	push	r29
     656:	ea 01       	movw	r28, r20
	long num, denom;
	if (clk2x==0 && bscale>=0) {
     658:	01 15       	cp	r16, r1
     65a:	11 05       	cpc	r17, r1
     65c:	09 f0       	breq	.+2      	; 0x660 <usart_baud+0x22>
     65e:	71 c0       	rjmp	.+226    	; 0x742 <usart_baud+0x104>
     660:	33 23       	and	r19, r19
     662:	a4 f1       	brlt	.+104    	; 0x6cc <usart_baud+0x8e>
		num = freq/(1<<bscale)*10;
     664:	41 e0       	ldi	r20, 0x01	; 1
     666:	50 e0       	ldi	r21, 0x00	; 0
     668:	fa 01       	movw	r30, r20
     66a:	02 c0       	rjmp	.+4      	; 0x670 <usart_baud+0x32>
     66c:	ee 0f       	add	r30, r30
     66e:	ff 1f       	adc	r31, r31
     670:	2a 95       	dec	r18
     672:	e2 f7       	brpl	.-8      	; 0x66c <usart_baud+0x2e>
     674:	9f 01       	movw	r18, r30
     676:	03 2e       	mov	r0, r19
     678:	00 0c       	add	r0, r0
     67a:	44 0b       	sbc	r20, r20
     67c:	55 0b       	sbc	r21, r21
     67e:	0e 94 3c 05 	call	0xa78	; 0xa78 <__divmodsi4>
     682:	da 01       	movw	r26, r20
     684:	c9 01       	movw	r24, r18
     686:	88 0f       	add	r24, r24
     688:	99 1f       	adc	r25, r25
     68a:	aa 1f       	adc	r26, r26
     68c:	bb 1f       	adc	r27, r27
     68e:	4c 01       	movw	r8, r24
     690:	5d 01       	movw	r10, r26
     692:	88 0c       	add	r8, r8
     694:	99 1c       	adc	r9, r9
     696:	aa 1c       	adc	r10, r10
     698:	bb 1c       	adc	r11, r11
     69a:	88 0c       	add	r8, r8
     69c:	99 1c       	adc	r9, r9
     69e:	aa 1c       	adc	r10, r10
     6a0:	bb 1c       	adc	r11, r11
     6a2:	88 0e       	add	r8, r24
     6a4:	99 1e       	adc	r9, r25
     6a6:	aa 1e       	adc	r10, r26
     6a8:	bb 1e       	adc	r11, r27
		denom = 16*(bsel+1);
     6aa:	6e 01       	movw	r12, r28
     6ac:	ff ef       	ldi	r31, 0xFF	; 255
     6ae:	cf 1a       	sub	r12, r31
     6b0:	df 0a       	sbc	r13, r31
     6b2:	cc 0c       	add	r12, r12
     6b4:	dd 1c       	adc	r13, r13
     6b6:	cc 0c       	add	r12, r12
     6b8:	dd 1c       	adc	r13, r13
     6ba:	cc 0c       	add	r12, r12
     6bc:	dd 1c       	adc	r13, r13
     6be:	cc 0c       	add	r12, r12
     6c0:	dd 1c       	adc	r13, r13
     6c2:	0d 2c       	mov	r0, r13
     6c4:	00 0c       	add	r0, r0
     6c6:	ee 08       	sbc	r14, r14
     6c8:	ff 08       	sbc	r15, r15
     6ca:	ad c0       	rjmp	.+346    	; 0x826 <usart_baud+0x1e8>
	}
	else if (clk2x==0 && bscale<0) {
		num = freq/16*(1<<-bscale)*10;
     6cc:	31 95       	neg	r19
     6ce:	21 95       	neg	r18
     6d0:	31 09       	sbc	r19, r1
     6d2:	41 e0       	ldi	r20, 0x01	; 1
     6d4:	50 e0       	ldi	r21, 0x00	; 0
     6d6:	6a 01       	movw	r12, r20
     6d8:	02 c0       	rjmp	.+4      	; 0x6de <usart_baud+0xa0>
     6da:	cc 0c       	add	r12, r12
     6dc:	dd 1c       	adc	r13, r13
     6de:	2a 95       	dec	r18
     6e0:	e2 f7       	brpl	.-8      	; 0x6da <usart_baud+0x9c>
     6e2:	8b 01       	movw	r16, r22
     6e4:	9c 01       	movw	r18, r24
     6e6:	99 23       	and	r25, r25
     6e8:	24 f4       	brge	.+8      	; 0x6f2 <usart_baud+0xb4>
     6ea:	01 5f       	subi	r16, 0xF1	; 241
     6ec:	1f 4f       	sbci	r17, 0xFF	; 255
     6ee:	2f 4f       	sbci	r18, 0xFF	; 255
     6f0:	3f 4f       	sbci	r19, 0xFF	; 255
     6f2:	a9 01       	movw	r20, r18
     6f4:	98 01       	movw	r18, r16
     6f6:	68 94       	set
     6f8:	13 f8       	bld	r1, 3
     6fa:	55 95       	asr	r21
     6fc:	47 95       	ror	r20
     6fe:	37 95       	ror	r19
     700:	27 95       	ror	r18
     702:	16 94       	lsr	r1
     704:	d1 f7       	brne	.-12     	; 0x6fa <usart_baud+0xbc>
     706:	d6 01       	movw	r26, r12
     708:	0e 94 66 05 	call	0xacc	; 0xacc <__mulshisi3>
     70c:	dc 01       	movw	r26, r24
     70e:	cb 01       	movw	r24, r22
     710:	88 0f       	add	r24, r24
     712:	99 1f       	adc	r25, r25
     714:	aa 1f       	adc	r26, r26
     716:	bb 1f       	adc	r27, r27
     718:	4c 01       	movw	r8, r24
     71a:	5d 01       	movw	r10, r26
     71c:	88 0c       	add	r8, r8
     71e:	99 1c       	adc	r9, r9
     720:	aa 1c       	adc	r10, r10
     722:	bb 1c       	adc	r11, r11
     724:	88 0c       	add	r8, r8
     726:	99 1c       	adc	r9, r9
     728:	aa 1c       	adc	r10, r10
     72a:	bb 1c       	adc	r11, r11
     72c:	88 0e       	add	r8, r24
     72e:	99 1e       	adc	r9, r25
     730:	aa 1e       	adc	r10, r26
     732:	bb 1e       	adc	r11, r27
		denom = bsel+(1<<-bscale);
     734:	cc 0e       	add	r12, r28
     736:	dd 1e       	adc	r13, r29
     738:	0d 2c       	mov	r0, r13
     73a:	00 0c       	add	r0, r0
     73c:	ee 08       	sbc	r14, r14
     73e:	ff 08       	sbc	r15, r15
     740:	72 c0       	rjmp	.+228    	; 0x826 <usart_baud+0x1e8>
	}
	else if (clk2x==1 && bscale>=0) {
     742:	01 30       	cpi	r16, 0x01	; 1
     744:	11 05       	cpc	r17, r1
     746:	09 f0       	breq	.+2      	; 0x74a <usart_baud+0x10c>
     748:	6e c0       	rjmp	.+220    	; 0x826 <usart_baud+0x1e8>
     74a:	33 23       	and	r19, r19
     74c:	94 f1       	brlt	.+100    	; 0x7b2 <usart_baud+0x174>
		num = freq/(1<<bscale)*10;
     74e:	41 e0       	ldi	r20, 0x01	; 1
     750:	50 e0       	ldi	r21, 0x00	; 0
     752:	fa 01       	movw	r30, r20
     754:	02 c0       	rjmp	.+4      	; 0x75a <usart_baud+0x11c>
     756:	ee 0f       	add	r30, r30
     758:	ff 1f       	adc	r31, r31
     75a:	2a 95       	dec	r18
     75c:	e2 f7       	brpl	.-8      	; 0x756 <usart_baud+0x118>
     75e:	9f 01       	movw	r18, r30
     760:	03 2e       	mov	r0, r19
     762:	00 0c       	add	r0, r0
     764:	44 0b       	sbc	r20, r20
     766:	55 0b       	sbc	r21, r21
     768:	0e 94 3c 05 	call	0xa78	; 0xa78 <__divmodsi4>
     76c:	da 01       	movw	r26, r20
     76e:	c9 01       	movw	r24, r18
     770:	88 0f       	add	r24, r24
     772:	99 1f       	adc	r25, r25
     774:	aa 1f       	adc	r26, r26
     776:	bb 1f       	adc	r27, r27
     778:	4c 01       	movw	r8, r24
     77a:	5d 01       	movw	r10, r26
     77c:	88 0c       	add	r8, r8
     77e:	99 1c       	adc	r9, r9
     780:	aa 1c       	adc	r10, r10
     782:	bb 1c       	adc	r11, r11
     784:	88 0c       	add	r8, r8
     786:	99 1c       	adc	r9, r9
     788:	aa 1c       	adc	r10, r10
     78a:	bb 1c       	adc	r11, r11
     78c:	88 0e       	add	r8, r24
     78e:	99 1e       	adc	r9, r25
     790:	aa 1e       	adc	r10, r26
     792:	bb 1e       	adc	r11, r27
		denom = 8*(bsel+1);
     794:	6e 01       	movw	r12, r28
     796:	ff ef       	ldi	r31, 0xFF	; 255
     798:	cf 1a       	sub	r12, r31
     79a:	df 0a       	sbc	r13, r31
     79c:	cc 0c       	add	r12, r12
     79e:	dd 1c       	adc	r13, r13
     7a0:	cc 0c       	add	r12, r12
     7a2:	dd 1c       	adc	r13, r13
     7a4:	cc 0c       	add	r12, r12
     7a6:	dd 1c       	adc	r13, r13
     7a8:	0d 2c       	mov	r0, r13
     7aa:	00 0c       	add	r0, r0
     7ac:	ee 08       	sbc	r14, r14
     7ae:	ff 08       	sbc	r15, r15
     7b0:	3a c0       	rjmp	.+116    	; 0x826 <usart_baud+0x1e8>
	}
	else if (clk2x==1 && bscale<0) {
		num = freq/8*(1<<-bscale)*10;
     7b2:	31 95       	neg	r19
     7b4:	21 95       	neg	r18
     7b6:	31 09       	sbc	r19, r1
     7b8:	41 e0       	ldi	r20, 0x01	; 1
     7ba:	50 e0       	ldi	r21, 0x00	; 0
     7bc:	6a 01       	movw	r12, r20
     7be:	02 c0       	rjmp	.+4      	; 0x7c4 <usart_baud+0x186>
     7c0:	cc 0c       	add	r12, r12
     7c2:	dd 1c       	adc	r13, r13
     7c4:	2a 95       	dec	r18
     7c6:	e2 f7       	brpl	.-8      	; 0x7c0 <usart_baud+0x182>
     7c8:	8b 01       	movw	r16, r22
     7ca:	9c 01       	movw	r18, r24
     7cc:	99 23       	and	r25, r25
     7ce:	24 f4       	brge	.+8      	; 0x7d8 <usart_baud+0x19a>
     7d0:	09 5f       	subi	r16, 0xF9	; 249
     7d2:	1f 4f       	sbci	r17, 0xFF	; 255
     7d4:	2f 4f       	sbci	r18, 0xFF	; 255
     7d6:	3f 4f       	sbci	r19, 0xFF	; 255
     7d8:	a9 01       	movw	r20, r18
     7da:	98 01       	movw	r18, r16
     7dc:	68 94       	set
     7de:	12 f8       	bld	r1, 2
     7e0:	55 95       	asr	r21
     7e2:	47 95       	ror	r20
     7e4:	37 95       	ror	r19
     7e6:	27 95       	ror	r18
     7e8:	16 94       	lsr	r1
     7ea:	d1 f7       	brne	.-12     	; 0x7e0 <usart_baud+0x1a2>
     7ec:	d6 01       	movw	r26, r12
     7ee:	0e 94 66 05 	call	0xacc	; 0xacc <__mulshisi3>
     7f2:	dc 01       	movw	r26, r24
     7f4:	cb 01       	movw	r24, r22
     7f6:	88 0f       	add	r24, r24
     7f8:	99 1f       	adc	r25, r25
     7fa:	aa 1f       	adc	r26, r26
     7fc:	bb 1f       	adc	r27, r27
     7fe:	4c 01       	movw	r8, r24
     800:	5d 01       	movw	r10, r26
     802:	88 0c       	add	r8, r8
     804:	99 1c       	adc	r9, r9
     806:	aa 1c       	adc	r10, r10
     808:	bb 1c       	adc	r11, r11
     80a:	88 0c       	add	r8, r8
     80c:	99 1c       	adc	r9, r9
     80e:	aa 1c       	adc	r10, r10
     810:	bb 1c       	adc	r11, r11
     812:	88 0e       	add	r8, r24
     814:	99 1e       	adc	r9, r25
     816:	aa 1e       	adc	r10, r26
     818:	bb 1e       	adc	r11, r27
		denom = bsel+(1<<-bscale);
     81a:	cc 0e       	add	r12, r28
     81c:	dd 1e       	adc	r13, r29
     81e:	0d 2c       	mov	r0, r13
     820:	00 0c       	add	r0, r0
     822:	ee 08       	sbc	r14, r14
     824:	ff 08       	sbc	r15, r15
	}
	#pragma GCC diagnostic ignored "-Wmaybe-uninitialized"
	return (num<0 || denom==0) ? -1 : (num/denom+5)/10;
     826:	bb 20       	and	r11, r11
     828:	d4 f0       	brlt	.+52     	; 0x85e <usart_baud+0x220>
     82a:	c1 14       	cp	r12, r1
     82c:	d1 04       	cpc	r13, r1
     82e:	e1 04       	cpc	r14, r1
     830:	f1 04       	cpc	r15, r1
     832:	c9 f0       	breq	.+50     	; 0x866 <usart_baud+0x228>
     834:	c5 01       	movw	r24, r10
     836:	b4 01       	movw	r22, r8
     838:	a7 01       	movw	r20, r14
     83a:	96 01       	movw	r18, r12
     83c:	0e 94 3c 05 	call	0xa78	; 0xa78 <__divmodsi4>
     840:	ca 01       	movw	r24, r20
     842:	b9 01       	movw	r22, r18
     844:	6b 5f       	subi	r22, 0xFB	; 251
     846:	7f 4f       	sbci	r23, 0xFF	; 255
     848:	8f 4f       	sbci	r24, 0xFF	; 255
     84a:	9f 4f       	sbci	r25, 0xFF	; 255
     84c:	2a e0       	ldi	r18, 0x0A	; 10
     84e:	30 e0       	ldi	r19, 0x00	; 0
     850:	40 e0       	ldi	r20, 0x00	; 0
     852:	50 e0       	ldi	r21, 0x00	; 0
     854:	0e 94 3c 05 	call	0xa78	; 0xa78 <__divmodsi4>
     858:	ca 01       	movw	r24, r20
     85a:	b9 01       	movw	r22, r18
     85c:	07 c0       	rjmp	.+14     	; 0x86c <usart_baud+0x22e>
     85e:	6f ef       	ldi	r22, 0xFF	; 255
     860:	7f ef       	ldi	r23, 0xFF	; 255
     862:	cb 01       	movw	r24, r22
     864:	03 c0       	rjmp	.+6      	; 0x86c <usart_baud+0x22e>
     866:	6f ef       	ldi	r22, 0xFF	; 255
     868:	7f ef       	ldi	r23, 0xFF	; 255
     86a:	cb 01       	movw	r24, r22
	#pragma GCC diagnostic warning "-Wmaybe-uninitialized"
}
     86c:	df 91       	pop	r29
     86e:	cf 91       	pop	r28
     870:	1f 91       	pop	r17
     872:	0f 91       	pop	r16
     874:	ff 90       	pop	r15
     876:	ef 90       	pop	r14
     878:	df 90       	pop	r13
     87a:	cf 90       	pop	r12
     87c:	bf 90       	pop	r11
     87e:	af 90       	pop	r10
     880:	9f 90       	pop	r9
     882:	8f 90       	pop	r8
     884:	08 95       	ret

00000886 <usart_params>:

int usart_params(long freq, long baud, int* bsel, int* bscale, int* clk2x)
{
     886:	2f 92       	push	r2
     888:	3f 92       	push	r3
     88a:	4f 92       	push	r4
     88c:	5f 92       	push	r5
     88e:	6f 92       	push	r6
     890:	7f 92       	push	r7
     892:	8f 92       	push	r8
     894:	9f 92       	push	r9
     896:	af 92       	push	r10
     898:	bf 92       	push	r11
     89a:	cf 92       	push	r12
     89c:	df 92       	push	r13
     89e:	ef 92       	push	r14
     8a0:	ff 92       	push	r15
     8a2:	0f 93       	push	r16
     8a4:	1f 93       	push	r17
     8a6:	cf 93       	push	r28
     8a8:	df 93       	push	r29
	int error;
	if (baud > freq/16) {
     8aa:	4b 01       	movw	r8, r22
     8ac:	5c 01       	movw	r10, r24
     8ae:	99 23       	and	r25, r25
     8b0:	2c f4       	brge	.+10     	; 0x8bc <usart_params+0x36>
     8b2:	ef e0       	ldi	r30, 0x0F	; 15
     8b4:	8e 0e       	add	r8, r30
     8b6:	91 1c       	adc	r9, r1
     8b8:	a1 1c       	adc	r10, r1
     8ba:	b1 1c       	adc	r11, r1
     8bc:	68 94       	set
     8be:	13 f8       	bld	r1, 3
     8c0:	b5 94       	asr	r11
     8c2:	a7 94       	ror	r10
     8c4:	97 94       	ror	r9
     8c6:	87 94       	ror	r8
     8c8:	16 94       	lsr	r1
     8ca:	d1 f7       	brne	.-12     	; 0x8c0 <usart_params+0x3a>
     8cc:	82 16       	cp	r8, r18
     8ce:	93 06       	cpc	r9, r19
     8d0:	a4 06       	cpc	r10, r20
     8d2:	b5 06       	cpc	r11, r21
     8d4:	44 f4       	brge	.+16     	; 0x8e6 <usart_params+0x60>
		*bsel = -1;
     8d6:	8f ef       	ldi	r24, 0xFF	; 255
     8d8:	9f ef       	ldi	r25, 0xFF	; 255
     8da:	f8 01       	movw	r30, r16
     8dc:	80 83       	st	Z, r24
     8de:	91 83       	std	Z+1, r25	; 0x01
		return 1000;
     8e0:	88 ee       	ldi	r24, 0xE8	; 232
     8e2:	93 e0       	ldi	r25, 0x03	; 3
     8e4:	5f c0       	rjmp	.+190    	; 0x9a4 <usart_params+0x11e>
     8e6:	e7 01       	movw	r28, r14
     8e8:	18 01       	movw	r2, r16
     8ea:	29 01       	movw	r4, r18
     8ec:	3a 01       	movw	r6, r20
     8ee:	4b 01       	movw	r8, r22
     8f0:	5c 01       	movw	r10, r24
	}
	for (*clk2x=1;*clk2x>=0;(*clk2x)--) {
     8f2:	81 e0       	ldi	r24, 0x01	; 1
     8f4:	90 e0       	ldi	r25, 0x00	; 0
     8f6:	f6 01       	movw	r30, r12
     8f8:	80 83       	st	Z, r24
     8fa:	91 83       	std	Z+1, r25	; 0x01
		for (*bscale=-7;*bscale<8;(*bscale)++) {
     8fc:	f9 ef       	ldi	r31, 0xF9	; 249
     8fe:	f8 83       	st	Y, r31
     900:	2f ef       	ldi	r18, 0xFF	; 255
     902:	29 83       	std	Y+1, r18	; 0x01
     904:	09 ef       	ldi	r16, 0xF9	; 249
     906:	1f ef       	ldi	r17, 0xFF	; 255
			*bsel = usart_bsel(freq,baud,*bscale,*clk2x);
     908:	f6 01       	movw	r30, r12
     90a:	e0 80       	ld	r14, Z
     90c:	f1 80       	ldd	r15, Z+1	; 0x01
     90e:	a3 01       	movw	r20, r6
     910:	92 01       	movw	r18, r4
     912:	c5 01       	movw	r24, r10
     914:	b4 01       	movw	r22, r8
     916:	0e 94 ac 01 	call	0x358	; 0x358 <usart_bsel>
     91a:	f1 01       	movw	r30, r2
     91c:	80 83       	st	Z, r24
     91e:	91 83       	std	Z+1, r25	; 0x01
			if (-1<*bsel && *bsel<LIMIT) goto found;
     920:	8f 3f       	cpi	r24, 0xFF	; 255
     922:	9f 41       	sbci	r25, 0x1F	; 31
     924:	88 f0       	brcs	.+34     	; 0x948 <usart_params+0xc2>
	if (baud > freq/16) {
		*bsel = -1;
		return 1000;
	}
	for (*clk2x=1;*clk2x>=0;(*clk2x)--) {
		for (*bscale=-7;*bscale<8;(*bscale)++) {
     926:	08 81       	ld	r16, Y
     928:	19 81       	ldd	r17, Y+1	; 0x01
     92a:	0f 5f       	subi	r16, 0xFF	; 255
     92c:	1f 4f       	sbci	r17, 0xFF	; 255
     92e:	08 83       	st	Y, r16
     930:	19 83       	std	Y+1, r17	; 0x01
     932:	08 30       	cpi	r16, 0x08	; 8
     934:	11 05       	cpc	r17, r1
     936:	44 f3       	brlt	.-48     	; 0x908 <usart_params+0x82>
	int error;
	if (baud > freq/16) {
		*bsel = -1;
		return 1000;
	}
	for (*clk2x=1;*clk2x>=0;(*clk2x)--) {
     938:	f6 01       	movw	r30, r12
     93a:	80 81       	ld	r24, Z
     93c:	91 81       	ldd	r25, Z+1	; 0x01
     93e:	01 97       	sbiw	r24, 0x01	; 1
     940:	80 83       	st	Z, r24
     942:	91 83       	std	Z+1, r25	; 0x01
     944:	99 23       	and	r25, r25
     946:	d4 f6       	brge	.-76     	; 0x8fc <usart_params+0x76>
			*bsel = usart_bsel(freq,baud,*bscale,*clk2x);
			if (-1<*bsel && *bsel<LIMIT) goto found;
		}
	}
	found:
	error = 1000*(usart_baud(freq,*bsel,*bscale,*clk2x)-baud)/baud;
     948:	f1 01       	movw	r30, r2
     94a:	e0 80       	ld	r14, Z
     94c:	f1 80       	ldd	r15, Z+1	; 0x01
     94e:	f6 01       	movw	r30, r12
     950:	00 81       	ld	r16, Z
     952:	11 81       	ldd	r17, Z+1	; 0x01
     954:	28 81       	ld	r18, Y
     956:	39 81       	ldd	r19, Y+1	; 0x01
     958:	a7 01       	movw	r20, r14
     95a:	c5 01       	movw	r24, r10
     95c:	b4 01       	movw	r22, r8
     95e:	0e 94 1f 03 	call	0x63e	; 0x63e <usart_baud>
     962:	9b 01       	movw	r18, r22
     964:	ac 01       	movw	r20, r24
     966:	24 19       	sub	r18, r4
     968:	35 09       	sbc	r19, r5
     96a:	46 09       	sbc	r20, r6
     96c:	57 09       	sbc	r21, r7
     96e:	a8 ee       	ldi	r26, 0xE8	; 232
     970:	b3 e0       	ldi	r27, 0x03	; 3
     972:	0e 94 5b 05 	call	0xab6	; 0xab6 <__muluhisi3>
     976:	a3 01       	movw	r20, r6
     978:	92 01       	movw	r18, r4
     97a:	0e 94 3c 05 	call	0xa78	; 0xa78 <__divmodsi4>
	*bsel = (*bsel>LIMIT || error>USART_BAUD_TOLERANCE) ? -1 : *bsel;
     97e:	e1 14       	cp	r14, r1
     980:	f0 e2       	ldi	r31, 0x20	; 32
     982:	ff 06       	cpc	r15, r31
     984:	24 f4       	brge	.+8      	; 0x98e <usart_params+0x108>
     986:	25 31       	cpi	r18, 0x15	; 21
     988:	31 05       	cpc	r19, r1
     98a:	2c f4       	brge	.+10     	; 0x996 <usart_params+0x110>
     98c:	07 c0       	rjmp	.+14     	; 0x99c <usart_params+0x116>
     98e:	ee 24       	eor	r14, r14
     990:	ea 94       	dec	r14
     992:	fe 2c       	mov	r15, r14
     994:	03 c0       	rjmp	.+6      	; 0x99c <usart_params+0x116>
     996:	ee 24       	eor	r14, r14
     998:	ea 94       	dec	r14
     99a:	fe 2c       	mov	r15, r14
     99c:	f1 01       	movw	r30, r2
     99e:	e0 82       	st	Z, r14
     9a0:	f1 82       	std	Z+1, r15	; 0x01
	return error;
     9a2:	c9 01       	movw	r24, r18
}
     9a4:	df 91       	pop	r29
     9a6:	cf 91       	pop	r28
     9a8:	1f 91       	pop	r17
     9aa:	0f 91       	pop	r16
     9ac:	ff 90       	pop	r15
     9ae:	ef 90       	pop	r14
     9b0:	df 90       	pop	r13
     9b2:	cf 90       	pop	r12
     9b4:	bf 90       	pop	r11
     9b6:	af 90       	pop	r10
     9b8:	9f 90       	pop	r9
     9ba:	8f 90       	pop	r8
     9bc:	7f 90       	pop	r7
     9be:	6f 90       	pop	r6
     9c0:	5f 90       	pop	r5
     9c2:	4f 90       	pop	r4
     9c4:	3f 90       	pop	r3
     9c6:	2f 90       	pop	r2
     9c8:	08 95       	ret

000009ca <usart_init>:
#ifndef F_CPU
#error "uart.c requires F_CPU to be defined"
#endif

void usart_init(void)
{
     9ca:	af 92       	push	r10
     9cc:	bf 92       	push	r11
     9ce:	cf 92       	push	r12
     9d0:	df 92       	push	r13
     9d2:	ef 92       	push	r14
     9d4:	ff 92       	push	r15
     9d6:	0f 93       	push	r16
     9d8:	1f 93       	push	r17
     9da:	cf 93       	push	r28
     9dc:	df 93       	push	r29
     9de:	00 d0       	rcall	.+0      	; 0x9e0 <usart_init+0x16>
     9e0:	00 d0       	rcall	.+0      	; 0x9e2 <usart_init+0x18>
     9e2:	cd b7       	in	r28, 0x3d	; 61
     9e4:	de b7       	in	r29, 0x3e	; 62
    int bsel, bscale, clk2x;
	USART_PORT.DIRSET = USART_TX_PIN_bm;
     9e6:	e0 e4       	ldi	r30, 0x40	; 64
     9e8:	f6 e0       	ldi	r31, 0x06	; 6
     9ea:	88 e0       	ldi	r24, 0x08	; 8
     9ec:	81 83       	std	Z+1, r24	; 0x01
	USART_PORT.DIRCLR = USART_RX_PIN_bm;
     9ee:	84 e0       	ldi	r24, 0x04	; 4
     9f0:	82 83       	std	Z+2, r24	; 0x02
	USART_MODULE.CTRLC = ( USART_CMODE_ASYNCHRONOUS_gc | USART_CHSIZE_8BIT_gc | USART_PMODE_DISABLED_gc);
     9f2:	0f 2e       	mov	r0, r31
     9f4:	f0 ea       	ldi	r31, 0xA0	; 160
     9f6:	af 2e       	mov	r10, r31
     9f8:	f8 e0       	ldi	r31, 0x08	; 8
     9fa:	bf 2e       	mov	r11, r31
     9fc:	f0 2d       	mov	r31, r0
     9fe:	83 e0       	ldi	r24, 0x03	; 3
     a00:	f5 01       	movw	r30, r10
     a02:	85 83       	std	Z+5, r24	; 0x05
	usart_params(F_CPU,USART_STD_BAUDRATE,&bsel,&bscale,&clk2x);
     a04:	ce 01       	movw	r24, r28
     a06:	05 96       	adiw	r24, 0x05	; 5
     a08:	6c 01       	movw	r12, r24
     a0a:	fe 01       	movw	r30, r28
     a0c:	33 96       	adiw	r30, 0x03	; 3
     a0e:	7f 01       	movw	r14, r30
     a10:	8e 01       	movw	r16, r28
     a12:	0f 5f       	subi	r16, 0xFF	; 255
     a14:	1f 4f       	sbci	r17, 0xFF	; 255
     a16:	20 e0       	ldi	r18, 0x00	; 0
     a18:	32 ec       	ldi	r19, 0xC2	; 194
     a1a:	41 e0       	ldi	r20, 0x01	; 1
     a1c:	50 e0       	ldi	r21, 0x00	; 0
     a1e:	60 e8       	ldi	r22, 0x80	; 128
     a20:	74 e8       	ldi	r23, 0x84	; 132
     a22:	8e e1       	ldi	r24, 0x1E	; 30
     a24:	90 e0       	ldi	r25, 0x00	; 0
     a26:	0e 94 43 04 	call	0x886	; 0x886 <usart_params>
	USART_MODULE.BAUDCTRLA = bsel & USART_BSEL_gm;
     a2a:	89 81       	ldd	r24, Y+1	; 0x01
     a2c:	2a 81       	ldd	r18, Y+2	; 0x02
     a2e:	f5 01       	movw	r30, r10
     a30:	86 83       	std	Z+6, r24	; 0x06
	USART_MODULE.BAUDCTRLB = (bscale<<USART_BSCALE_gp) | ((bsel>>8) & ~USART_BSCALE_gm);
     a32:	8b 81       	ldd	r24, Y+3	; 0x03
     a34:	9c 81       	ldd	r25, Y+4	; 0x04
     a36:	82 95       	swap	r24
     a38:	92 95       	swap	r25
     a3a:	90 7f       	andi	r25, 0xF0	; 240
     a3c:	98 27       	eor	r25, r24
     a3e:	80 7f       	andi	r24, 0xF0	; 240
     a40:	98 27       	eor	r25, r24
     a42:	92 2f       	mov	r25, r18
     a44:	9f 70       	andi	r25, 0x0F	; 15
     a46:	89 2b       	or	r24, r25
     a48:	87 83       	std	Z+7, r24	; 0x07
	USART_MODULE.CTRLB = (USART_RXEN_bm | USART_TXEN_bm | ((clk2x) ? USART_CLK2X_bm : 0));
     a4a:	8d 81       	ldd	r24, Y+5	; 0x05
     a4c:	9e 81       	ldd	r25, Y+6	; 0x06
     a4e:	89 2b       	or	r24, r25
     a50:	11 f4       	brne	.+4      	; 0xa56 <usart_init+0x8c>
     a52:	88 e1       	ldi	r24, 0x18	; 24
     a54:	01 c0       	rjmp	.+2      	; 0xa58 <usart_init+0x8e>
     a56:	8c e1       	ldi	r24, 0x1C	; 28
     a58:	80 93 a4 08 	sts	0x08A4, r24	; 0x8008a4 <__TEXT_REGION_LENGTH__+0x7008a4>
}
     a5c:	26 96       	adiw	r28, 0x06	; 6
     a5e:	cd bf       	out	0x3d, r28	; 61
     a60:	de bf       	out	0x3e, r29	; 62
     a62:	df 91       	pop	r29
     a64:	cf 91       	pop	r28
     a66:	1f 91       	pop	r17
     a68:	0f 91       	pop	r16
     a6a:	ff 90       	pop	r15
     a6c:	ef 90       	pop	r14
     a6e:	df 90       	pop	r13
     a70:	cf 90       	pop	r12
     a72:	bf 90       	pop	r11
     a74:	af 90       	pop	r10
     a76:	08 95       	ret

00000a78 <__divmodsi4>:
     a78:	05 2e       	mov	r0, r21
     a7a:	97 fb       	bst	r25, 7
     a7c:	1e f4       	brtc	.+6      	; 0xa84 <__divmodsi4+0xc>
     a7e:	00 94       	com	r0
     a80:	0e 94 53 05 	call	0xaa6	; 0xaa6 <__negsi2>
     a84:	57 fd       	sbrc	r21, 7
     a86:	07 d0       	rcall	.+14     	; 0xa96 <__divmodsi4_neg2>
     a88:	0e 94 6e 05 	call	0xadc	; 0xadc <__udivmodsi4>
     a8c:	07 fc       	sbrc	r0, 7
     a8e:	03 d0       	rcall	.+6      	; 0xa96 <__divmodsi4_neg2>
     a90:	4e f4       	brtc	.+18     	; 0xaa4 <__divmodsi4_exit>
     a92:	0c 94 53 05 	jmp	0xaa6	; 0xaa6 <__negsi2>

00000a96 <__divmodsi4_neg2>:
     a96:	50 95       	com	r21
     a98:	40 95       	com	r20
     a9a:	30 95       	com	r19
     a9c:	21 95       	neg	r18
     a9e:	3f 4f       	sbci	r19, 0xFF	; 255
     aa0:	4f 4f       	sbci	r20, 0xFF	; 255
     aa2:	5f 4f       	sbci	r21, 0xFF	; 255

00000aa4 <__divmodsi4_exit>:
     aa4:	08 95       	ret

00000aa6 <__negsi2>:
     aa6:	90 95       	com	r25
     aa8:	80 95       	com	r24
     aaa:	70 95       	com	r23
     aac:	61 95       	neg	r22
     aae:	7f 4f       	sbci	r23, 0xFF	; 255
     ab0:	8f 4f       	sbci	r24, 0xFF	; 255
     ab2:	9f 4f       	sbci	r25, 0xFF	; 255
     ab4:	08 95       	ret

00000ab6 <__muluhisi3>:
     ab6:	0e 94 90 05 	call	0xb20	; 0xb20 <__umulhisi3>
     aba:	a5 9f       	mul	r26, r21
     abc:	90 0d       	add	r25, r0
     abe:	b4 9f       	mul	r27, r20
     ac0:	90 0d       	add	r25, r0
     ac2:	a4 9f       	mul	r26, r20
     ac4:	80 0d       	add	r24, r0
     ac6:	91 1d       	adc	r25, r1
     ac8:	11 24       	eor	r1, r1
     aca:	08 95       	ret

00000acc <__mulshisi3>:
     acc:	b7 ff       	sbrs	r27, 7
     ace:	0c 94 5b 05 	jmp	0xab6	; 0xab6 <__muluhisi3>

00000ad2 <__mulohisi3>:
     ad2:	0e 94 5b 05 	call	0xab6	; 0xab6 <__muluhisi3>
     ad6:	82 1b       	sub	r24, r18
     ad8:	93 0b       	sbc	r25, r19
     ada:	08 95       	ret

00000adc <__udivmodsi4>:
     adc:	a1 e2       	ldi	r26, 0x21	; 33
     ade:	1a 2e       	mov	r1, r26
     ae0:	aa 1b       	sub	r26, r26
     ae2:	bb 1b       	sub	r27, r27
     ae4:	fd 01       	movw	r30, r26
     ae6:	0d c0       	rjmp	.+26     	; 0xb02 <__udivmodsi4_ep>

00000ae8 <__udivmodsi4_loop>:
     ae8:	aa 1f       	adc	r26, r26
     aea:	bb 1f       	adc	r27, r27
     aec:	ee 1f       	adc	r30, r30
     aee:	ff 1f       	adc	r31, r31
     af0:	a2 17       	cp	r26, r18
     af2:	b3 07       	cpc	r27, r19
     af4:	e4 07       	cpc	r30, r20
     af6:	f5 07       	cpc	r31, r21
     af8:	20 f0       	brcs	.+8      	; 0xb02 <__udivmodsi4_ep>
     afa:	a2 1b       	sub	r26, r18
     afc:	b3 0b       	sbc	r27, r19
     afe:	e4 0b       	sbc	r30, r20
     b00:	f5 0b       	sbc	r31, r21

00000b02 <__udivmodsi4_ep>:
     b02:	66 1f       	adc	r22, r22
     b04:	77 1f       	adc	r23, r23
     b06:	88 1f       	adc	r24, r24
     b08:	99 1f       	adc	r25, r25
     b0a:	1a 94       	dec	r1
     b0c:	69 f7       	brne	.-38     	; 0xae8 <__udivmodsi4_loop>
     b0e:	60 95       	com	r22
     b10:	70 95       	com	r23
     b12:	80 95       	com	r24
     b14:	90 95       	com	r25
     b16:	9b 01       	movw	r18, r22
     b18:	ac 01       	movw	r20, r24
     b1a:	bd 01       	movw	r22, r26
     b1c:	cf 01       	movw	r24, r30
     b1e:	08 95       	ret

00000b20 <__umulhisi3>:
     b20:	a2 9f       	mul	r26, r18
     b22:	b0 01       	movw	r22, r0
     b24:	b3 9f       	mul	r27, r19
     b26:	c0 01       	movw	r24, r0
     b28:	a3 9f       	mul	r26, r19
     b2a:	70 0d       	add	r23, r0
     b2c:	81 1d       	adc	r24, r1
     b2e:	11 24       	eor	r1, r1
     b30:	91 1d       	adc	r25, r1
     b32:	b2 9f       	mul	r27, r18
     b34:	70 0d       	add	r23, r0
     b36:	81 1d       	adc	r24, r1
     b38:	11 24       	eor	r1, r1
     b3a:	91 1d       	adc	r25, r1
     b3c:	08 95       	ret

00000b3e <printf>:
     b3e:	cf 93       	push	r28
     b40:	df 93       	push	r29
     b42:	cd b7       	in	r28, 0x3d	; 61
     b44:	de b7       	in	r29, 0x3e	; 62
     b46:	ae 01       	movw	r20, r28
     b48:	4a 5f       	subi	r20, 0xFA	; 250
     b4a:	5f 4f       	sbci	r21, 0xFF	; 255
     b4c:	fa 01       	movw	r30, r20
     b4e:	61 91       	ld	r22, Z+
     b50:	71 91       	ld	r23, Z+
     b52:	af 01       	movw	r20, r30
     b54:	80 91 24 20 	lds	r24, 0x2024	; 0x802024 <__data_end+0x2>
     b58:	90 91 25 20 	lds	r25, 0x2025	; 0x802025 <__data_end+0x3>
     b5c:	0e 94 b3 05 	call	0xb66	; 0xb66 <vfprintf>
     b60:	df 91       	pop	r29
     b62:	cf 91       	pop	r28
     b64:	08 95       	ret

00000b66 <vfprintf>:
     b66:	2f 92       	push	r2
     b68:	3f 92       	push	r3
     b6a:	4f 92       	push	r4
     b6c:	5f 92       	push	r5
     b6e:	6f 92       	push	r6
     b70:	7f 92       	push	r7
     b72:	8f 92       	push	r8
     b74:	9f 92       	push	r9
     b76:	af 92       	push	r10
     b78:	bf 92       	push	r11
     b7a:	cf 92       	push	r12
     b7c:	df 92       	push	r13
     b7e:	ef 92       	push	r14
     b80:	ff 92       	push	r15
     b82:	0f 93       	push	r16
     b84:	1f 93       	push	r17
     b86:	cf 93       	push	r28
     b88:	df 93       	push	r29
     b8a:	cd b7       	in	r28, 0x3d	; 61
     b8c:	de b7       	in	r29, 0x3e	; 62
     b8e:	2b 97       	sbiw	r28, 0x0b	; 11
     b90:	cd bf       	out	0x3d, r28	; 61
     b92:	de bf       	out	0x3e, r29	; 62
     b94:	6c 01       	movw	r12, r24
     b96:	7b 01       	movw	r14, r22
     b98:	8a 01       	movw	r16, r20
     b9a:	fc 01       	movw	r30, r24
     b9c:	16 82       	std	Z+6, r1	; 0x06
     b9e:	17 82       	std	Z+7, r1	; 0x07
     ba0:	83 81       	ldd	r24, Z+3	; 0x03
     ba2:	81 ff       	sbrs	r24, 1
     ba4:	cc c1       	rjmp	.+920    	; 0xf3e <vfprintf+0x3d8>
     ba6:	ce 01       	movw	r24, r28
     ba8:	01 96       	adiw	r24, 0x01	; 1
     baa:	3c 01       	movw	r6, r24
     bac:	f6 01       	movw	r30, r12
     bae:	93 81       	ldd	r25, Z+3	; 0x03
     bb0:	f7 01       	movw	r30, r14
     bb2:	93 fd       	sbrc	r25, 3
     bb4:	85 91       	lpm	r24, Z+
     bb6:	93 ff       	sbrs	r25, 3
     bb8:	81 91       	ld	r24, Z+
     bba:	7f 01       	movw	r14, r30
     bbc:	88 23       	and	r24, r24
     bbe:	09 f4       	brne	.+2      	; 0xbc2 <vfprintf+0x5c>
     bc0:	ba c1       	rjmp	.+884    	; 0xf36 <vfprintf+0x3d0>
     bc2:	85 32       	cpi	r24, 0x25	; 37
     bc4:	39 f4       	brne	.+14     	; 0xbd4 <vfprintf+0x6e>
     bc6:	93 fd       	sbrc	r25, 3
     bc8:	85 91       	lpm	r24, Z+
     bca:	93 ff       	sbrs	r25, 3
     bcc:	81 91       	ld	r24, Z+
     bce:	7f 01       	movw	r14, r30
     bd0:	85 32       	cpi	r24, 0x25	; 37
     bd2:	29 f4       	brne	.+10     	; 0xbde <vfprintf+0x78>
     bd4:	b6 01       	movw	r22, r12
     bd6:	90 e0       	ldi	r25, 0x00	; 0
     bd8:	0e 94 cd 07 	call	0xf9a	; 0xf9a <fputc>
     bdc:	e7 cf       	rjmp	.-50     	; 0xbac <vfprintf+0x46>
     bde:	91 2c       	mov	r9, r1
     be0:	21 2c       	mov	r2, r1
     be2:	31 2c       	mov	r3, r1
     be4:	ff e1       	ldi	r31, 0x1F	; 31
     be6:	f3 15       	cp	r31, r3
     be8:	d8 f0       	brcs	.+54     	; 0xc20 <vfprintf+0xba>
     bea:	8b 32       	cpi	r24, 0x2B	; 43
     bec:	79 f0       	breq	.+30     	; 0xc0c <vfprintf+0xa6>
     bee:	38 f4       	brcc	.+14     	; 0xbfe <vfprintf+0x98>
     bf0:	80 32       	cpi	r24, 0x20	; 32
     bf2:	79 f0       	breq	.+30     	; 0xc12 <vfprintf+0xac>
     bf4:	83 32       	cpi	r24, 0x23	; 35
     bf6:	a1 f4       	brne	.+40     	; 0xc20 <vfprintf+0xba>
     bf8:	23 2d       	mov	r18, r3
     bfa:	20 61       	ori	r18, 0x10	; 16
     bfc:	1d c0       	rjmp	.+58     	; 0xc38 <vfprintf+0xd2>
     bfe:	8d 32       	cpi	r24, 0x2D	; 45
     c00:	61 f0       	breq	.+24     	; 0xc1a <vfprintf+0xb4>
     c02:	80 33       	cpi	r24, 0x30	; 48
     c04:	69 f4       	brne	.+26     	; 0xc20 <vfprintf+0xba>
     c06:	23 2d       	mov	r18, r3
     c08:	21 60       	ori	r18, 0x01	; 1
     c0a:	16 c0       	rjmp	.+44     	; 0xc38 <vfprintf+0xd2>
     c0c:	83 2d       	mov	r24, r3
     c0e:	82 60       	ori	r24, 0x02	; 2
     c10:	38 2e       	mov	r3, r24
     c12:	e3 2d       	mov	r30, r3
     c14:	e4 60       	ori	r30, 0x04	; 4
     c16:	3e 2e       	mov	r3, r30
     c18:	2a c0       	rjmp	.+84     	; 0xc6e <vfprintf+0x108>
     c1a:	f3 2d       	mov	r31, r3
     c1c:	f8 60       	ori	r31, 0x08	; 8
     c1e:	1d c0       	rjmp	.+58     	; 0xc5a <vfprintf+0xf4>
     c20:	37 fc       	sbrc	r3, 7
     c22:	2d c0       	rjmp	.+90     	; 0xc7e <vfprintf+0x118>
     c24:	20 ed       	ldi	r18, 0xD0	; 208
     c26:	28 0f       	add	r18, r24
     c28:	2a 30       	cpi	r18, 0x0A	; 10
     c2a:	40 f0       	brcs	.+16     	; 0xc3c <vfprintf+0xd6>
     c2c:	8e 32       	cpi	r24, 0x2E	; 46
     c2e:	b9 f4       	brne	.+46     	; 0xc5e <vfprintf+0xf8>
     c30:	36 fc       	sbrc	r3, 6
     c32:	81 c1       	rjmp	.+770    	; 0xf36 <vfprintf+0x3d0>
     c34:	23 2d       	mov	r18, r3
     c36:	20 64       	ori	r18, 0x40	; 64
     c38:	32 2e       	mov	r3, r18
     c3a:	19 c0       	rjmp	.+50     	; 0xc6e <vfprintf+0x108>
     c3c:	36 fe       	sbrs	r3, 6
     c3e:	06 c0       	rjmp	.+12     	; 0xc4c <vfprintf+0xe6>
     c40:	8a e0       	ldi	r24, 0x0A	; 10
     c42:	98 9e       	mul	r9, r24
     c44:	20 0d       	add	r18, r0
     c46:	11 24       	eor	r1, r1
     c48:	92 2e       	mov	r9, r18
     c4a:	11 c0       	rjmp	.+34     	; 0xc6e <vfprintf+0x108>
     c4c:	ea e0       	ldi	r30, 0x0A	; 10
     c4e:	2e 9e       	mul	r2, r30
     c50:	20 0d       	add	r18, r0
     c52:	11 24       	eor	r1, r1
     c54:	22 2e       	mov	r2, r18
     c56:	f3 2d       	mov	r31, r3
     c58:	f0 62       	ori	r31, 0x20	; 32
     c5a:	3f 2e       	mov	r3, r31
     c5c:	08 c0       	rjmp	.+16     	; 0xc6e <vfprintf+0x108>
     c5e:	8c 36       	cpi	r24, 0x6C	; 108
     c60:	21 f4       	brne	.+8      	; 0xc6a <vfprintf+0x104>
     c62:	83 2d       	mov	r24, r3
     c64:	80 68       	ori	r24, 0x80	; 128
     c66:	38 2e       	mov	r3, r24
     c68:	02 c0       	rjmp	.+4      	; 0xc6e <vfprintf+0x108>
     c6a:	88 36       	cpi	r24, 0x68	; 104
     c6c:	41 f4       	brne	.+16     	; 0xc7e <vfprintf+0x118>
     c6e:	f7 01       	movw	r30, r14
     c70:	93 fd       	sbrc	r25, 3
     c72:	85 91       	lpm	r24, Z+
     c74:	93 ff       	sbrs	r25, 3
     c76:	81 91       	ld	r24, Z+
     c78:	7f 01       	movw	r14, r30
     c7a:	81 11       	cpse	r24, r1
     c7c:	b3 cf       	rjmp	.-154    	; 0xbe4 <vfprintf+0x7e>
     c7e:	98 2f       	mov	r25, r24
     c80:	9f 7d       	andi	r25, 0xDF	; 223
     c82:	95 54       	subi	r25, 0x45	; 69
     c84:	93 30       	cpi	r25, 0x03	; 3
     c86:	28 f4       	brcc	.+10     	; 0xc92 <vfprintf+0x12c>
     c88:	0c 5f       	subi	r16, 0xFC	; 252
     c8a:	1f 4f       	sbci	r17, 0xFF	; 255
     c8c:	9f e3       	ldi	r25, 0x3F	; 63
     c8e:	99 83       	std	Y+1, r25	; 0x01
     c90:	0d c0       	rjmp	.+26     	; 0xcac <vfprintf+0x146>
     c92:	83 36       	cpi	r24, 0x63	; 99
     c94:	31 f0       	breq	.+12     	; 0xca2 <vfprintf+0x13c>
     c96:	83 37       	cpi	r24, 0x73	; 115
     c98:	71 f0       	breq	.+28     	; 0xcb6 <vfprintf+0x150>
     c9a:	83 35       	cpi	r24, 0x53	; 83
     c9c:	09 f0       	breq	.+2      	; 0xca0 <vfprintf+0x13a>
     c9e:	59 c0       	rjmp	.+178    	; 0xd52 <vfprintf+0x1ec>
     ca0:	21 c0       	rjmp	.+66     	; 0xce4 <vfprintf+0x17e>
     ca2:	f8 01       	movw	r30, r16
     ca4:	80 81       	ld	r24, Z
     ca6:	89 83       	std	Y+1, r24	; 0x01
     ca8:	0e 5f       	subi	r16, 0xFE	; 254
     caa:	1f 4f       	sbci	r17, 0xFF	; 255
     cac:	88 24       	eor	r8, r8
     cae:	83 94       	inc	r8
     cb0:	91 2c       	mov	r9, r1
     cb2:	53 01       	movw	r10, r6
     cb4:	13 c0       	rjmp	.+38     	; 0xcdc <vfprintf+0x176>
     cb6:	28 01       	movw	r4, r16
     cb8:	f2 e0       	ldi	r31, 0x02	; 2
     cba:	4f 0e       	add	r4, r31
     cbc:	51 1c       	adc	r5, r1
     cbe:	f8 01       	movw	r30, r16
     cc0:	a0 80       	ld	r10, Z
     cc2:	b1 80       	ldd	r11, Z+1	; 0x01
     cc4:	36 fe       	sbrs	r3, 6
     cc6:	03 c0       	rjmp	.+6      	; 0xcce <vfprintf+0x168>
     cc8:	69 2d       	mov	r22, r9
     cca:	70 e0       	ldi	r23, 0x00	; 0
     ccc:	02 c0       	rjmp	.+4      	; 0xcd2 <vfprintf+0x16c>
     cce:	6f ef       	ldi	r22, 0xFF	; 255
     cd0:	7f ef       	ldi	r23, 0xFF	; 255
     cd2:	c5 01       	movw	r24, r10
     cd4:	0e 94 c2 07 	call	0xf84	; 0xf84 <strnlen>
     cd8:	4c 01       	movw	r8, r24
     cda:	82 01       	movw	r16, r4
     cdc:	f3 2d       	mov	r31, r3
     cde:	ff 77       	andi	r31, 0x7F	; 127
     ce0:	3f 2e       	mov	r3, r31
     ce2:	16 c0       	rjmp	.+44     	; 0xd10 <vfprintf+0x1aa>
     ce4:	28 01       	movw	r4, r16
     ce6:	22 e0       	ldi	r18, 0x02	; 2
     ce8:	42 0e       	add	r4, r18
     cea:	51 1c       	adc	r5, r1
     cec:	f8 01       	movw	r30, r16
     cee:	a0 80       	ld	r10, Z
     cf0:	b1 80       	ldd	r11, Z+1	; 0x01
     cf2:	36 fe       	sbrs	r3, 6
     cf4:	03 c0       	rjmp	.+6      	; 0xcfc <vfprintf+0x196>
     cf6:	69 2d       	mov	r22, r9
     cf8:	70 e0       	ldi	r23, 0x00	; 0
     cfa:	02 c0       	rjmp	.+4      	; 0xd00 <vfprintf+0x19a>
     cfc:	6f ef       	ldi	r22, 0xFF	; 255
     cfe:	7f ef       	ldi	r23, 0xFF	; 255
     d00:	c5 01       	movw	r24, r10
     d02:	0e 94 b7 07 	call	0xf6e	; 0xf6e <strnlen_P>
     d06:	4c 01       	movw	r8, r24
     d08:	f3 2d       	mov	r31, r3
     d0a:	f0 68       	ori	r31, 0x80	; 128
     d0c:	3f 2e       	mov	r3, r31
     d0e:	82 01       	movw	r16, r4
     d10:	33 fc       	sbrc	r3, 3
     d12:	1b c0       	rjmp	.+54     	; 0xd4a <vfprintf+0x1e4>
     d14:	82 2d       	mov	r24, r2
     d16:	90 e0       	ldi	r25, 0x00	; 0
     d18:	88 16       	cp	r8, r24
     d1a:	99 06       	cpc	r9, r25
     d1c:	b0 f4       	brcc	.+44     	; 0xd4a <vfprintf+0x1e4>
     d1e:	b6 01       	movw	r22, r12
     d20:	80 e2       	ldi	r24, 0x20	; 32
     d22:	90 e0       	ldi	r25, 0x00	; 0
     d24:	0e 94 cd 07 	call	0xf9a	; 0xf9a <fputc>
     d28:	2a 94       	dec	r2
     d2a:	f4 cf       	rjmp	.-24     	; 0xd14 <vfprintf+0x1ae>
     d2c:	f5 01       	movw	r30, r10
     d2e:	37 fc       	sbrc	r3, 7
     d30:	85 91       	lpm	r24, Z+
     d32:	37 fe       	sbrs	r3, 7
     d34:	81 91       	ld	r24, Z+
     d36:	5f 01       	movw	r10, r30
     d38:	b6 01       	movw	r22, r12
     d3a:	90 e0       	ldi	r25, 0x00	; 0
     d3c:	0e 94 cd 07 	call	0xf9a	; 0xf9a <fputc>
     d40:	21 10       	cpse	r2, r1
     d42:	2a 94       	dec	r2
     d44:	21 e0       	ldi	r18, 0x01	; 1
     d46:	82 1a       	sub	r8, r18
     d48:	91 08       	sbc	r9, r1
     d4a:	81 14       	cp	r8, r1
     d4c:	91 04       	cpc	r9, r1
     d4e:	71 f7       	brne	.-36     	; 0xd2c <vfprintf+0x1c6>
     d50:	e8 c0       	rjmp	.+464    	; 0xf22 <vfprintf+0x3bc>
     d52:	84 36       	cpi	r24, 0x64	; 100
     d54:	11 f0       	breq	.+4      	; 0xd5a <vfprintf+0x1f4>
     d56:	89 36       	cpi	r24, 0x69	; 105
     d58:	41 f5       	brne	.+80     	; 0xdaa <vfprintf+0x244>
     d5a:	f8 01       	movw	r30, r16
     d5c:	37 fe       	sbrs	r3, 7
     d5e:	07 c0       	rjmp	.+14     	; 0xd6e <vfprintf+0x208>
     d60:	60 81       	ld	r22, Z
     d62:	71 81       	ldd	r23, Z+1	; 0x01
     d64:	82 81       	ldd	r24, Z+2	; 0x02
     d66:	93 81       	ldd	r25, Z+3	; 0x03
     d68:	0c 5f       	subi	r16, 0xFC	; 252
     d6a:	1f 4f       	sbci	r17, 0xFF	; 255
     d6c:	08 c0       	rjmp	.+16     	; 0xd7e <vfprintf+0x218>
     d6e:	60 81       	ld	r22, Z
     d70:	71 81       	ldd	r23, Z+1	; 0x01
     d72:	07 2e       	mov	r0, r23
     d74:	00 0c       	add	r0, r0
     d76:	88 0b       	sbc	r24, r24
     d78:	99 0b       	sbc	r25, r25
     d7a:	0e 5f       	subi	r16, 0xFE	; 254
     d7c:	1f 4f       	sbci	r17, 0xFF	; 255
     d7e:	f3 2d       	mov	r31, r3
     d80:	ff 76       	andi	r31, 0x6F	; 111
     d82:	3f 2e       	mov	r3, r31
     d84:	97 ff       	sbrs	r25, 7
     d86:	09 c0       	rjmp	.+18     	; 0xd9a <vfprintf+0x234>
     d88:	90 95       	com	r25
     d8a:	80 95       	com	r24
     d8c:	70 95       	com	r23
     d8e:	61 95       	neg	r22
     d90:	7f 4f       	sbci	r23, 0xFF	; 255
     d92:	8f 4f       	sbci	r24, 0xFF	; 255
     d94:	9f 4f       	sbci	r25, 0xFF	; 255
     d96:	f0 68       	ori	r31, 0x80	; 128
     d98:	3f 2e       	mov	r3, r31
     d9a:	2a e0       	ldi	r18, 0x0A	; 10
     d9c:	30 e0       	ldi	r19, 0x00	; 0
     d9e:	a3 01       	movw	r20, r6
     da0:	0e 94 09 08 	call	0x1012	; 0x1012 <__ultoa_invert>
     da4:	88 2e       	mov	r8, r24
     da6:	86 18       	sub	r8, r6
     da8:	45 c0       	rjmp	.+138    	; 0xe34 <vfprintf+0x2ce>
     daa:	85 37       	cpi	r24, 0x75	; 117
     dac:	31 f4       	brne	.+12     	; 0xdba <vfprintf+0x254>
     dae:	23 2d       	mov	r18, r3
     db0:	2f 7e       	andi	r18, 0xEF	; 239
     db2:	b2 2e       	mov	r11, r18
     db4:	2a e0       	ldi	r18, 0x0A	; 10
     db6:	30 e0       	ldi	r19, 0x00	; 0
     db8:	25 c0       	rjmp	.+74     	; 0xe04 <vfprintf+0x29e>
     dba:	93 2d       	mov	r25, r3
     dbc:	99 7f       	andi	r25, 0xF9	; 249
     dbe:	b9 2e       	mov	r11, r25
     dc0:	8f 36       	cpi	r24, 0x6F	; 111
     dc2:	c1 f0       	breq	.+48     	; 0xdf4 <vfprintf+0x28e>
     dc4:	18 f4       	brcc	.+6      	; 0xdcc <vfprintf+0x266>
     dc6:	88 35       	cpi	r24, 0x58	; 88
     dc8:	79 f0       	breq	.+30     	; 0xde8 <vfprintf+0x282>
     dca:	b5 c0       	rjmp	.+362    	; 0xf36 <vfprintf+0x3d0>
     dcc:	80 37       	cpi	r24, 0x70	; 112
     dce:	19 f0       	breq	.+6      	; 0xdd6 <vfprintf+0x270>
     dd0:	88 37       	cpi	r24, 0x78	; 120
     dd2:	21 f0       	breq	.+8      	; 0xddc <vfprintf+0x276>
     dd4:	b0 c0       	rjmp	.+352    	; 0xf36 <vfprintf+0x3d0>
     dd6:	e9 2f       	mov	r30, r25
     dd8:	e0 61       	ori	r30, 0x10	; 16
     dda:	be 2e       	mov	r11, r30
     ddc:	b4 fe       	sbrs	r11, 4
     dde:	0d c0       	rjmp	.+26     	; 0xdfa <vfprintf+0x294>
     de0:	fb 2d       	mov	r31, r11
     de2:	f4 60       	ori	r31, 0x04	; 4
     de4:	bf 2e       	mov	r11, r31
     de6:	09 c0       	rjmp	.+18     	; 0xdfa <vfprintf+0x294>
     de8:	34 fe       	sbrs	r3, 4
     dea:	0a c0       	rjmp	.+20     	; 0xe00 <vfprintf+0x29a>
     dec:	29 2f       	mov	r18, r25
     dee:	26 60       	ori	r18, 0x06	; 6
     df0:	b2 2e       	mov	r11, r18
     df2:	06 c0       	rjmp	.+12     	; 0xe00 <vfprintf+0x29a>
     df4:	28 e0       	ldi	r18, 0x08	; 8
     df6:	30 e0       	ldi	r19, 0x00	; 0
     df8:	05 c0       	rjmp	.+10     	; 0xe04 <vfprintf+0x29e>
     dfa:	20 e1       	ldi	r18, 0x10	; 16
     dfc:	30 e0       	ldi	r19, 0x00	; 0
     dfe:	02 c0       	rjmp	.+4      	; 0xe04 <vfprintf+0x29e>
     e00:	20 e1       	ldi	r18, 0x10	; 16
     e02:	32 e0       	ldi	r19, 0x02	; 2
     e04:	f8 01       	movw	r30, r16
     e06:	b7 fe       	sbrs	r11, 7
     e08:	07 c0       	rjmp	.+14     	; 0xe18 <vfprintf+0x2b2>
     e0a:	60 81       	ld	r22, Z
     e0c:	71 81       	ldd	r23, Z+1	; 0x01
     e0e:	82 81       	ldd	r24, Z+2	; 0x02
     e10:	93 81       	ldd	r25, Z+3	; 0x03
     e12:	0c 5f       	subi	r16, 0xFC	; 252
     e14:	1f 4f       	sbci	r17, 0xFF	; 255
     e16:	06 c0       	rjmp	.+12     	; 0xe24 <vfprintf+0x2be>
     e18:	60 81       	ld	r22, Z
     e1a:	71 81       	ldd	r23, Z+1	; 0x01
     e1c:	80 e0       	ldi	r24, 0x00	; 0
     e1e:	90 e0       	ldi	r25, 0x00	; 0
     e20:	0e 5f       	subi	r16, 0xFE	; 254
     e22:	1f 4f       	sbci	r17, 0xFF	; 255
     e24:	a3 01       	movw	r20, r6
     e26:	0e 94 09 08 	call	0x1012	; 0x1012 <__ultoa_invert>
     e2a:	88 2e       	mov	r8, r24
     e2c:	86 18       	sub	r8, r6
     e2e:	fb 2d       	mov	r31, r11
     e30:	ff 77       	andi	r31, 0x7F	; 127
     e32:	3f 2e       	mov	r3, r31
     e34:	36 fe       	sbrs	r3, 6
     e36:	0d c0       	rjmp	.+26     	; 0xe52 <vfprintf+0x2ec>
     e38:	23 2d       	mov	r18, r3
     e3a:	2e 7f       	andi	r18, 0xFE	; 254
     e3c:	a2 2e       	mov	r10, r18
     e3e:	89 14       	cp	r8, r9
     e40:	58 f4       	brcc	.+22     	; 0xe58 <vfprintf+0x2f2>
     e42:	34 fe       	sbrs	r3, 4
     e44:	0b c0       	rjmp	.+22     	; 0xe5c <vfprintf+0x2f6>
     e46:	32 fc       	sbrc	r3, 2
     e48:	09 c0       	rjmp	.+18     	; 0xe5c <vfprintf+0x2f6>
     e4a:	83 2d       	mov	r24, r3
     e4c:	8e 7e       	andi	r24, 0xEE	; 238
     e4e:	a8 2e       	mov	r10, r24
     e50:	05 c0       	rjmp	.+10     	; 0xe5c <vfprintf+0x2f6>
     e52:	b8 2c       	mov	r11, r8
     e54:	a3 2c       	mov	r10, r3
     e56:	03 c0       	rjmp	.+6      	; 0xe5e <vfprintf+0x2f8>
     e58:	b8 2c       	mov	r11, r8
     e5a:	01 c0       	rjmp	.+2      	; 0xe5e <vfprintf+0x2f8>
     e5c:	b9 2c       	mov	r11, r9
     e5e:	a4 fe       	sbrs	r10, 4
     e60:	0f c0       	rjmp	.+30     	; 0xe80 <vfprintf+0x31a>
     e62:	fe 01       	movw	r30, r28
     e64:	e8 0d       	add	r30, r8
     e66:	f1 1d       	adc	r31, r1
     e68:	80 81       	ld	r24, Z
     e6a:	80 33       	cpi	r24, 0x30	; 48
     e6c:	21 f4       	brne	.+8      	; 0xe76 <vfprintf+0x310>
     e6e:	9a 2d       	mov	r25, r10
     e70:	99 7e       	andi	r25, 0xE9	; 233
     e72:	a9 2e       	mov	r10, r25
     e74:	09 c0       	rjmp	.+18     	; 0xe88 <vfprintf+0x322>
     e76:	a2 fe       	sbrs	r10, 2
     e78:	06 c0       	rjmp	.+12     	; 0xe86 <vfprintf+0x320>
     e7a:	b3 94       	inc	r11
     e7c:	b3 94       	inc	r11
     e7e:	04 c0       	rjmp	.+8      	; 0xe88 <vfprintf+0x322>
     e80:	8a 2d       	mov	r24, r10
     e82:	86 78       	andi	r24, 0x86	; 134
     e84:	09 f0       	breq	.+2      	; 0xe88 <vfprintf+0x322>
     e86:	b3 94       	inc	r11
     e88:	a3 fc       	sbrc	r10, 3
     e8a:	11 c0       	rjmp	.+34     	; 0xeae <vfprintf+0x348>
     e8c:	a0 fe       	sbrs	r10, 0
     e8e:	06 c0       	rjmp	.+12     	; 0xe9c <vfprintf+0x336>
     e90:	b2 14       	cp	r11, r2
     e92:	88 f4       	brcc	.+34     	; 0xeb6 <vfprintf+0x350>
     e94:	28 0c       	add	r2, r8
     e96:	92 2c       	mov	r9, r2
     e98:	9b 18       	sub	r9, r11
     e9a:	0e c0       	rjmp	.+28     	; 0xeb8 <vfprintf+0x352>
     e9c:	b2 14       	cp	r11, r2
     e9e:	60 f4       	brcc	.+24     	; 0xeb8 <vfprintf+0x352>
     ea0:	b6 01       	movw	r22, r12
     ea2:	80 e2       	ldi	r24, 0x20	; 32
     ea4:	90 e0       	ldi	r25, 0x00	; 0
     ea6:	0e 94 cd 07 	call	0xf9a	; 0xf9a <fputc>
     eaa:	b3 94       	inc	r11
     eac:	f7 cf       	rjmp	.-18     	; 0xe9c <vfprintf+0x336>
     eae:	b2 14       	cp	r11, r2
     eb0:	18 f4       	brcc	.+6      	; 0xeb8 <vfprintf+0x352>
     eb2:	2b 18       	sub	r2, r11
     eb4:	02 c0       	rjmp	.+4      	; 0xeba <vfprintf+0x354>
     eb6:	98 2c       	mov	r9, r8
     eb8:	21 2c       	mov	r2, r1
     eba:	a4 fe       	sbrs	r10, 4
     ebc:	10 c0       	rjmp	.+32     	; 0xede <vfprintf+0x378>
     ebe:	b6 01       	movw	r22, r12
     ec0:	80 e3       	ldi	r24, 0x30	; 48
     ec2:	90 e0       	ldi	r25, 0x00	; 0
     ec4:	0e 94 cd 07 	call	0xf9a	; 0xf9a <fputc>
     ec8:	a2 fe       	sbrs	r10, 2
     eca:	17 c0       	rjmp	.+46     	; 0xefa <vfprintf+0x394>
     ecc:	a1 fc       	sbrc	r10, 1
     ece:	03 c0       	rjmp	.+6      	; 0xed6 <vfprintf+0x370>
     ed0:	88 e7       	ldi	r24, 0x78	; 120
     ed2:	90 e0       	ldi	r25, 0x00	; 0
     ed4:	02 c0       	rjmp	.+4      	; 0xeda <vfprintf+0x374>
     ed6:	88 e5       	ldi	r24, 0x58	; 88
     ed8:	90 e0       	ldi	r25, 0x00	; 0
     eda:	b6 01       	movw	r22, r12
     edc:	0c c0       	rjmp	.+24     	; 0xef6 <vfprintf+0x390>
     ede:	8a 2d       	mov	r24, r10
     ee0:	86 78       	andi	r24, 0x86	; 134
     ee2:	59 f0       	breq	.+22     	; 0xefa <vfprintf+0x394>
     ee4:	a1 fe       	sbrs	r10, 1
     ee6:	02 c0       	rjmp	.+4      	; 0xeec <vfprintf+0x386>
     ee8:	8b e2       	ldi	r24, 0x2B	; 43
     eea:	01 c0       	rjmp	.+2      	; 0xeee <vfprintf+0x388>
     eec:	80 e2       	ldi	r24, 0x20	; 32
     eee:	a7 fc       	sbrc	r10, 7
     ef0:	8d e2       	ldi	r24, 0x2D	; 45
     ef2:	b6 01       	movw	r22, r12
     ef4:	90 e0       	ldi	r25, 0x00	; 0
     ef6:	0e 94 cd 07 	call	0xf9a	; 0xf9a <fputc>
     efa:	89 14       	cp	r8, r9
     efc:	38 f4       	brcc	.+14     	; 0xf0c <vfprintf+0x3a6>
     efe:	b6 01       	movw	r22, r12
     f00:	80 e3       	ldi	r24, 0x30	; 48
     f02:	90 e0       	ldi	r25, 0x00	; 0
     f04:	0e 94 cd 07 	call	0xf9a	; 0xf9a <fputc>
     f08:	9a 94       	dec	r9
     f0a:	f7 cf       	rjmp	.-18     	; 0xefa <vfprintf+0x394>
     f0c:	8a 94       	dec	r8
     f0e:	f3 01       	movw	r30, r6
     f10:	e8 0d       	add	r30, r8
     f12:	f1 1d       	adc	r31, r1
     f14:	80 81       	ld	r24, Z
     f16:	b6 01       	movw	r22, r12
     f18:	90 e0       	ldi	r25, 0x00	; 0
     f1a:	0e 94 cd 07 	call	0xf9a	; 0xf9a <fputc>
     f1e:	81 10       	cpse	r8, r1
     f20:	f5 cf       	rjmp	.-22     	; 0xf0c <vfprintf+0x3a6>
     f22:	22 20       	and	r2, r2
     f24:	09 f4       	brne	.+2      	; 0xf28 <vfprintf+0x3c2>
     f26:	42 ce       	rjmp	.-892    	; 0xbac <vfprintf+0x46>
     f28:	b6 01       	movw	r22, r12
     f2a:	80 e2       	ldi	r24, 0x20	; 32
     f2c:	90 e0       	ldi	r25, 0x00	; 0
     f2e:	0e 94 cd 07 	call	0xf9a	; 0xf9a <fputc>
     f32:	2a 94       	dec	r2
     f34:	f6 cf       	rjmp	.-20     	; 0xf22 <vfprintf+0x3bc>
     f36:	f6 01       	movw	r30, r12
     f38:	86 81       	ldd	r24, Z+6	; 0x06
     f3a:	97 81       	ldd	r25, Z+7	; 0x07
     f3c:	02 c0       	rjmp	.+4      	; 0xf42 <vfprintf+0x3dc>
     f3e:	8f ef       	ldi	r24, 0xFF	; 255
     f40:	9f ef       	ldi	r25, 0xFF	; 255
     f42:	2b 96       	adiw	r28, 0x0b	; 11
     f44:	cd bf       	out	0x3d, r28	; 61
     f46:	de bf       	out	0x3e, r29	; 62
     f48:	df 91       	pop	r29
     f4a:	cf 91       	pop	r28
     f4c:	1f 91       	pop	r17
     f4e:	0f 91       	pop	r16
     f50:	ff 90       	pop	r15
     f52:	ef 90       	pop	r14
     f54:	df 90       	pop	r13
     f56:	cf 90       	pop	r12
     f58:	bf 90       	pop	r11
     f5a:	af 90       	pop	r10
     f5c:	9f 90       	pop	r9
     f5e:	8f 90       	pop	r8
     f60:	7f 90       	pop	r7
     f62:	6f 90       	pop	r6
     f64:	5f 90       	pop	r5
     f66:	4f 90       	pop	r4
     f68:	3f 90       	pop	r3
     f6a:	2f 90       	pop	r2
     f6c:	08 95       	ret

00000f6e <strnlen_P>:
     f6e:	fc 01       	movw	r30, r24
     f70:	05 90       	lpm	r0, Z+
     f72:	61 50       	subi	r22, 0x01	; 1
     f74:	70 40       	sbci	r23, 0x00	; 0
     f76:	01 10       	cpse	r0, r1
     f78:	d8 f7       	brcc	.-10     	; 0xf70 <strnlen_P+0x2>
     f7a:	80 95       	com	r24
     f7c:	90 95       	com	r25
     f7e:	8e 0f       	add	r24, r30
     f80:	9f 1f       	adc	r25, r31
     f82:	08 95       	ret

00000f84 <strnlen>:
     f84:	fc 01       	movw	r30, r24
     f86:	61 50       	subi	r22, 0x01	; 1
     f88:	70 40       	sbci	r23, 0x00	; 0
     f8a:	01 90       	ld	r0, Z+
     f8c:	01 10       	cpse	r0, r1
     f8e:	d8 f7       	brcc	.-10     	; 0xf86 <strnlen+0x2>
     f90:	80 95       	com	r24
     f92:	90 95       	com	r25
     f94:	8e 0f       	add	r24, r30
     f96:	9f 1f       	adc	r25, r31
     f98:	08 95       	ret

00000f9a <fputc>:
     f9a:	0f 93       	push	r16
     f9c:	1f 93       	push	r17
     f9e:	cf 93       	push	r28
     fa0:	df 93       	push	r29
     fa2:	fb 01       	movw	r30, r22
     fa4:	23 81       	ldd	r18, Z+3	; 0x03
     fa6:	21 fd       	sbrc	r18, 1
     fa8:	03 c0       	rjmp	.+6      	; 0xfb0 <fputc+0x16>
     faa:	8f ef       	ldi	r24, 0xFF	; 255
     fac:	9f ef       	ldi	r25, 0xFF	; 255
     fae:	2c c0       	rjmp	.+88     	; 0x1008 <fputc+0x6e>
     fb0:	22 ff       	sbrs	r18, 2
     fb2:	16 c0       	rjmp	.+44     	; 0xfe0 <fputc+0x46>
     fb4:	46 81       	ldd	r20, Z+6	; 0x06
     fb6:	57 81       	ldd	r21, Z+7	; 0x07
     fb8:	24 81       	ldd	r18, Z+4	; 0x04
     fba:	35 81       	ldd	r19, Z+5	; 0x05
     fbc:	42 17       	cp	r20, r18
     fbe:	53 07       	cpc	r21, r19
     fc0:	44 f4       	brge	.+16     	; 0xfd2 <fputc+0x38>
     fc2:	a0 81       	ld	r26, Z
     fc4:	b1 81       	ldd	r27, Z+1	; 0x01
     fc6:	9d 01       	movw	r18, r26
     fc8:	2f 5f       	subi	r18, 0xFF	; 255
     fca:	3f 4f       	sbci	r19, 0xFF	; 255
     fcc:	20 83       	st	Z, r18
     fce:	31 83       	std	Z+1, r19	; 0x01
     fd0:	8c 93       	st	X, r24
     fd2:	26 81       	ldd	r18, Z+6	; 0x06
     fd4:	37 81       	ldd	r19, Z+7	; 0x07
     fd6:	2f 5f       	subi	r18, 0xFF	; 255
     fd8:	3f 4f       	sbci	r19, 0xFF	; 255
     fda:	26 83       	std	Z+6, r18	; 0x06
     fdc:	37 83       	std	Z+7, r19	; 0x07
     fde:	14 c0       	rjmp	.+40     	; 0x1008 <fputc+0x6e>
     fe0:	8b 01       	movw	r16, r22
     fe2:	ec 01       	movw	r28, r24
     fe4:	fb 01       	movw	r30, r22
     fe6:	00 84       	ldd	r0, Z+8	; 0x08
     fe8:	f1 85       	ldd	r31, Z+9	; 0x09
     fea:	e0 2d       	mov	r30, r0
     fec:	19 95       	eicall
     fee:	89 2b       	or	r24, r25
     ff0:	e1 f6       	brne	.-72     	; 0xfaa <fputc+0x10>
     ff2:	d8 01       	movw	r26, r16
     ff4:	16 96       	adiw	r26, 0x06	; 6
     ff6:	8d 91       	ld	r24, X+
     ff8:	9c 91       	ld	r25, X
     ffa:	17 97       	sbiw	r26, 0x07	; 7
     ffc:	01 96       	adiw	r24, 0x01	; 1
     ffe:	16 96       	adiw	r26, 0x06	; 6
    1000:	8d 93       	st	X+, r24
    1002:	9c 93       	st	X, r25
    1004:	17 97       	sbiw	r26, 0x07	; 7
    1006:	ce 01       	movw	r24, r28
    1008:	df 91       	pop	r29
    100a:	cf 91       	pop	r28
    100c:	1f 91       	pop	r17
    100e:	0f 91       	pop	r16
    1010:	08 95       	ret

00001012 <__ultoa_invert>:
    1012:	fa 01       	movw	r30, r20
    1014:	aa 27       	eor	r26, r26
    1016:	28 30       	cpi	r18, 0x08	; 8
    1018:	51 f1       	breq	.+84     	; 0x106e <__ultoa_invert+0x5c>
    101a:	20 31       	cpi	r18, 0x10	; 16
    101c:	81 f1       	breq	.+96     	; 0x107e <__ultoa_invert+0x6c>
    101e:	e8 94       	clt
    1020:	6f 93       	push	r22
    1022:	6e 7f       	andi	r22, 0xFE	; 254
    1024:	6e 5f       	subi	r22, 0xFE	; 254
    1026:	7f 4f       	sbci	r23, 0xFF	; 255
    1028:	8f 4f       	sbci	r24, 0xFF	; 255
    102a:	9f 4f       	sbci	r25, 0xFF	; 255
    102c:	af 4f       	sbci	r26, 0xFF	; 255
    102e:	b1 e0       	ldi	r27, 0x01	; 1
    1030:	3e d0       	rcall	.+124    	; 0x10ae <__ultoa_invert+0x9c>
    1032:	b4 e0       	ldi	r27, 0x04	; 4
    1034:	3c d0       	rcall	.+120    	; 0x10ae <__ultoa_invert+0x9c>
    1036:	67 0f       	add	r22, r23
    1038:	78 1f       	adc	r23, r24
    103a:	89 1f       	adc	r24, r25
    103c:	9a 1f       	adc	r25, r26
    103e:	a1 1d       	adc	r26, r1
    1040:	68 0f       	add	r22, r24
    1042:	79 1f       	adc	r23, r25
    1044:	8a 1f       	adc	r24, r26
    1046:	91 1d       	adc	r25, r1
    1048:	a1 1d       	adc	r26, r1
    104a:	6a 0f       	add	r22, r26
    104c:	71 1d       	adc	r23, r1
    104e:	81 1d       	adc	r24, r1
    1050:	91 1d       	adc	r25, r1
    1052:	a1 1d       	adc	r26, r1
    1054:	20 d0       	rcall	.+64     	; 0x1096 <__ultoa_invert+0x84>
    1056:	09 f4       	brne	.+2      	; 0x105a <__ultoa_invert+0x48>
    1058:	68 94       	set
    105a:	3f 91       	pop	r19
    105c:	2a e0       	ldi	r18, 0x0A	; 10
    105e:	26 9f       	mul	r18, r22
    1060:	11 24       	eor	r1, r1
    1062:	30 19       	sub	r19, r0
    1064:	30 5d       	subi	r19, 0xD0	; 208
    1066:	31 93       	st	Z+, r19
    1068:	de f6       	brtc	.-74     	; 0x1020 <__ultoa_invert+0xe>
    106a:	cf 01       	movw	r24, r30
    106c:	08 95       	ret
    106e:	46 2f       	mov	r20, r22
    1070:	47 70       	andi	r20, 0x07	; 7
    1072:	40 5d       	subi	r20, 0xD0	; 208
    1074:	41 93       	st	Z+, r20
    1076:	b3 e0       	ldi	r27, 0x03	; 3
    1078:	0f d0       	rcall	.+30     	; 0x1098 <__ultoa_invert+0x86>
    107a:	c9 f7       	brne	.-14     	; 0x106e <__ultoa_invert+0x5c>
    107c:	f6 cf       	rjmp	.-20     	; 0x106a <__ultoa_invert+0x58>
    107e:	46 2f       	mov	r20, r22
    1080:	4f 70       	andi	r20, 0x0F	; 15
    1082:	40 5d       	subi	r20, 0xD0	; 208
    1084:	4a 33       	cpi	r20, 0x3A	; 58
    1086:	18 f0       	brcs	.+6      	; 0x108e <__ultoa_invert+0x7c>
    1088:	49 5d       	subi	r20, 0xD9	; 217
    108a:	31 fd       	sbrc	r19, 1
    108c:	40 52       	subi	r20, 0x20	; 32
    108e:	41 93       	st	Z+, r20
    1090:	02 d0       	rcall	.+4      	; 0x1096 <__ultoa_invert+0x84>
    1092:	a9 f7       	brne	.-22     	; 0x107e <__ultoa_invert+0x6c>
    1094:	ea cf       	rjmp	.-44     	; 0x106a <__ultoa_invert+0x58>
    1096:	b4 e0       	ldi	r27, 0x04	; 4
    1098:	a6 95       	lsr	r26
    109a:	97 95       	ror	r25
    109c:	87 95       	ror	r24
    109e:	77 95       	ror	r23
    10a0:	67 95       	ror	r22
    10a2:	ba 95       	dec	r27
    10a4:	c9 f7       	brne	.-14     	; 0x1098 <__ultoa_invert+0x86>
    10a6:	00 97       	sbiw	r24, 0x00	; 0
    10a8:	61 05       	cpc	r22, r1
    10aa:	71 05       	cpc	r23, r1
    10ac:	08 95       	ret
    10ae:	9b 01       	movw	r18, r22
    10b0:	ac 01       	movw	r20, r24
    10b2:	0a 2e       	mov	r0, r26
    10b4:	06 94       	lsr	r0
    10b6:	57 95       	ror	r21
    10b8:	47 95       	ror	r20
    10ba:	37 95       	ror	r19
    10bc:	27 95       	ror	r18
    10be:	ba 95       	dec	r27
    10c0:	c9 f7       	brne	.-14     	; 0x10b4 <__ultoa_invert+0xa2>
    10c2:	62 0f       	add	r22, r18
    10c4:	73 1f       	adc	r23, r19
    10c6:	84 1f       	adc	r24, r20
    10c8:	95 1f       	adc	r25, r21
    10ca:	a0 1d       	adc	r26, r0
    10cc:	08 95       	ret

000010ce <_exit>:
    10ce:	f8 94       	cli

000010d0 <__stop_program>:
    10d0:	ff cf       	rjmp	.-2      	; 0x10d0 <__stop_program>
